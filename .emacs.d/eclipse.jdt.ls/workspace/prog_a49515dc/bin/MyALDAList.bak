import java.util.Iterator;

**
 * @author Martin Lönn Andersson malo2669
 */

 public class MyALDAList<E> implements ALDAList<E> {

    private int size;
    private Node<E> head = null;
    private Node<E> tail = null;

    public MyALDAList() {
        this.size = 0;
    }

    // DONE?
    public void add(E element) {

        Node<E> newNode = new Node<>(element, null);

        if (size() == 0) {
            // om ja: noden ska sättas in på första index
            // alltså, länka head till newNode
            head = newNode;
            head.setNext(tail);
        } else {
            // om nej: noden ska sättas in på sista index
            // alltså, länka tail.next till newNode
            // kolla om tail är tom
            if (!(tail == null))
                tail.next = newNode; // om nej, peka om nuvaranda tail till newNode
            // gör newNode till tail
            tail = newNode;
        }
        // öka storleken på listan
        this.size++;
    }

    // DONE?
    // lägg till en ny nod på det angivna indexet
    public void add(int index, E element) {
        if (index > size() || size() == 0 || index < 0) {
            throw new IndexOutOfBoundsException();
        } else {
            Node<E> newNode = new Node<>(element, null);

            if (size() == 0) // om listan är tom ska både head & tail peka till denna nod
                head = tail = newNode;
            else {
                if (index == 0) { // om det angivna indexet är 0, sätt newNode.next till head och head till newNode
                    newNode.setNext(head);
                    head = newNode;
                } else if (index == size()) { // om det angivna indexet är slutet av listan, sätt tail.next till newNode och tail till newNode
                    tail.setNext(newNode);
                    tail = newNode;
                } else { // om det angivna indexet inte är i slutet eller början

                    Node<E> current = head;
                    Node<E> previous = null;
                    int i = 0;

                    while (i < index) {
                        previous = current;
                        current = current.getNext();
                        i++;
                    }
                    newNode.setNext(current);
                    previous.setNext(newNode);
                }
            }
        }
        this.size++;
    }

    // ta bort element på det angivna indexet
    public E remove(int index) {
        // iterera över listan tills indexet har hittats

        // länka om omkringliggande noder
        return null;
    }

    // ta bort det angivna elementet
    public boolean remove(E element) {
        // iterera över listan tills elementet har hittats

        // länka om omkringliggande noder
        return true;
    }

    public E get(int index) {
        if (size() == 0 || index > (size() - 1) || index < 0)
            throw new IndexOutOfBoundsException();
        else {
            Iterator<E> iterator = iterator();
            int i = 0;
            E current = iterator().next();
            E element = null;

            while (iterator.hasNext() && i < index) {
                current = iterator.next();
                i++;
            }

            if (i == index)
                element = current;

            return element;
        }
    }

    public boolean contains(E element) {

        Iterator<E> iterator = iterator();

        E current = iterator.next();

        while (iterator.hasNext()) {

            if (current == element)
                return true;
            current = iterator.next();
        }
        return false;
    }

    public int indexOf(E element) {

        Iterator<E> iterator = iterator();

        int i = 0;
        E current = iterator.next();

        while (iterator.hasNext()) {
            if (current.equals(element))
                return i;
            else {
                i++;
                current = iterator.next();
            }
        }
        return -1;
    }

    public void clear() {
        this.size = 0;
        this.head = null;
        this.tail = null;
    }

    public int size() {
        return this.size;
    }

    @Override
    public String toString() {

        Iterator<E> iterator = iterator();

        String items = "";

        while (iterator.hasNext()) {
            items += iterator.next() + ", ";
        }
        return "[" + items + "]";
    }

    public java.util.Iterator<E> iterator() {
        return new MyALDAListIterator();
    }

    private static class Node<E> {

        private E data;
        private Node<E> next;

        Node(E data, Node<E> next) {
            this.data = data;
            this.next = next;
        }

        public E getData() {
            return this.data;
        }

        public Node<E> getNext() {
            return this.next;
        }

        public void setNext(Node<E> element) {
            this.next = element;
        }
    }

    private class MyALDAListIterator implements java.util.Iterator<E> {

        private Node<E> current;

        public MyALDAListIterator() {
            current = head;
        }

        public boolean hasNext() {
            return current != null;
        }

        public E next() {
            if (!hasNext())
                throw new java.util.NoSuchElementException();

            E nextNode = current.data;
            current = current.next;
            return nextNode;
        }

        // ska ha med?
        public void remove() {
        }
    }
}
