#+TITLE: Emacs Configuration
#+AUTHOR: Martin Lönn Andersson
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Preamble

Welcome to my Emacs configuration. This is a literate configuration, meaning code and prose are intertwined in order to provide clear documentation. [[https://orgmode.org/worg/org-contrib/babel/][Org Babel]] makes this possible in =org= files, like this one.

This setup is heavily inspired by [[https://github.com/MatthewZMD/.emacs.d][Matthew Zeng's Emacs setup]].

* Startup
** Early Init
*** Defer Garbage Collection

Increase garbage collection memory threshold as early as possible to speed up startup.

#+begin_src emacs-lisp :tangle ./early-init.el

  (setq gc-cons-threshold 100000000)

#+end_src

*** Disable =package-enable-at-startup=

Package initialize occurs automatically, before =user-init-file= is loaded, but after =early-init-file=. We handle package initialization, so we must prevent Emacs from doing it early.

#+begin_src emacs-lisp

  (setq package-enable-at-startup nil)

#+end_src

*** Unset =file-name-handler-alist=

Every file opened and loaded by Emacs will run through this list to check for a proper handler for the file, but during startup, it won’t need any of them.

#+begin_src emacs-lisp

  (defvar file-name-handler-alist-original file-name-handler-alist)
  (setq file-name-handler-alist nil)

#+end_src

*** Hide UI Elements

It will be faster to disable them here before they've been initialized.

#+begin_src emacs-lisp :tangle ./early-init.el

  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (blink-cursor-mode -1)
  (set-fringe-mode 0)

#+end_src

*** Emacs Server

Run Emacs as a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][server]].

#+begin_src emacs-lisp :tangle ./early-init.el

  (require 'server)
  (if (not (server-running-p)) (server-start))

#+end_src

** Garbage Collection

A large ~gc-cons-threshold~ may cause freezing and stuttering during long-term interactive use.

If you experience freezing, decrease this amount, if you experience stuttering, increase this amount.

#+begin_src emacs-lisp

  (defvar better-gc-cons-threshold 4294967269; 512mb
    "The default value to use for `gc-cons-threshold'.

  If you experience freezing, decrease this.  If you experience stuttering, increase this.")

  (add-hook 'emacs-startup-hook
            (lambda () (setq gc-cons-threshold better-gc-cons-threshold)))

#+end_src

Garbage Collect when Emacs is out of focus and avoid garbage collection when using minibuffer.

#+begin_src emacs-lisp

  (add-hook 'emacs-startup-hook
        (lambda ()
          (if (boundp 'after-focus-change-function)
          (add-function :after after-focus-change-function
                (lambda ()
                  (unless (frame-focus-state)
                    (garbage-collect))))
        (add-hook 'after-focus-change-function 'garbage-collect))
          (defun gc-minibuffer-setup-hook ()
        (setq gc-cons-threshold (* better-gc-cons-threshold 2)))

          (defun gc-minibuffer-exit-hook ()
        (garbage-collect)
        (setq gc-cons-threshold better-gc-cons-threshold))

          (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
          (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))

#+end_src

** Define Constants

#+begin_src emacs-lisp

  (defconst *sys/linux*
    (eq system-type 'gnu/linux)
    "Are we running on a GNU/Linux system?")

  (defconst *sys/mac*
    (eq system-type 'darwin)
    "Are we running on a Mac system?")

#+end_src

** OS-specific Adaptions
*** Linux-specific Adaptions

Set super key to meta on Linux.

#+begin_src emacs-lisp

  (when *sys/linux*
    (setq x-super-keysym 'meta))

#+end_src

*** Mac-specific Adaptions

Set meta key, turn off option key as modifier, set dired to not use ~--dired~ flag with ~ls~ on macOS.

#+begin_src emacs-lisp

  (when *sys/mac*
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'none)
    (setq dired-use-ls-dired nil))

#+end_src

** Load Path

Set load path to include ~./elisp~ folder, ensure theme is remembered by loading ~custom.el~.

#+begin_src emacs-lisp

  (defun update-to-load-path (folder)
    "Update FOLDER and its subdirectories to `load-path'."
    (let ((base folder))
      (unless (member base load-path)
    (add-to-list 'load-path base))
      (dolist (f (directory-files base))
    (let ((name (concat base "/" f)))
      (when (and (file-directory-p name)
             (not (equal f ".."))
             (not (equal f ".")))
        (unless (member base load-path)
          (add-to-list 'load-path name)))))))

  (update-to-load-path (expand-file-name "elisp" user-emacs-directory))

  (load-file "~/.emacs.d/custom.el")

#+end_src

** Custom File

Customize-based settings should live in ~custom.el~ file.

#+begin_src emacs-lisp

  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'noerror)

#+end_src

** Backup Directory

Set backup directory location.

#+begin_src emacs-lisp

  (setq backup-directory-alist
    `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
    `((".*" ,temporary-file-directory t)))

#+end_src

* Package Management
** Package Archives & Initialize Package Manager

Set up MELPA, ELPA and Non-GNU ELPA and initialize the package manager.

#+begin_src emacs-lisp

  (setq package-archives
    '(("melpa" . "https://melpa.org/packages/")
      ("elpa" . "https://elpa.gnu.org/packages/")
      ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

  (package-initialize)

#+end_src
** Use Package

A nicer way to set up packages with [[https://github.com/jwiegley/use-package][use-package]]. Make sure =use-package= is installed, refresh package contents, always ensure packages are installed and turn on verbose logging.

#+begin_src emacs-lisp

  ;; ensure use-package is installed
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq
   use-package-always-ensure t
   use-package-verbose t)

#+end_src

** Auto Package Update

Automatically update packages every seven days with [[https://github.com/rranelli/auto-package-update.el][auto-package-update]].

#+begin_src emacs-lisp

  (use-package auto-package-update
    :if (not (daemonp))
    :custom
    (auto-package-update-interval 7) ;; in days
    (auto-package-update-prompt-before-update t)
    (auto-package-update-delete-old-versions t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe))

#+end_src

** Diminish

[[https://github.com/emacsmirror/diminish][Diminish]] hides minor modes from the modeline.

#+begin_src emacs-lisp

  (use-package diminish
    :diminish visual-line-mode
    :diminish centered-window-mode
    :diminish eldoc-mode
    :diminish evil-collection-unimpaired-mode
    :diminish abbrev-mode
    :diminish lsp-lens-mode)

#+end_src

* Global Functionalities
** User Information

#+begin_src emacs-lisp

  (setq user-full-name "Martin Lönn Andersson")
  (setq user-mail-address "mlonna@pm.me")

#+end_src

** Environment Variables

Get environment variables from shell with [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]].

#+begin_src emacs-lisp

  (use-package exec-path-from-shell
    :config
    ;; which environment variables to import
    (dolist (var '("LANG" "LC_ALL"))
      (add-to-list 'exec-path-from-shell-variables var))

    ;; activate exec-path-from-shell on macos and linux
    (when (or *sys/linux* *sys/mac*)
      (exec-path-from-shell-initialize))

    ;; activate exec-path-from-shell when emacs is launched as daemon
    (when (daemonp)
      (exec-path-from-shell-initialize)))

#+end_src

** Search Functionality

[[https://github.com/abo-abo/swiper/tree/master][Swiper]] provides search functionality.

#+begin_src emacs-lisp

  (use-package swiper
    :diminish
    :config
    (define-key swiper-map (kbd "C-h") 'delete-backward-char))

#+end_src

** Markdown Mode

The [[https://jblevins.org/projects/markdown-mode/][markdown mode]] package provides better markdown support.

#+begin_src emacs-lisp

    (use-package markdown-mode
      :defer t)

#+end_src

** Spell Checking

To spell check files, I use =flyspell= and [[https://github.com/hunspell/hunspell][hunspell]].

#+begin_src emacs-lisp

  (use-package flyspell
    :diminish flyspell-mode
    :hook
    (((markdown-mode org-mode text-mode) . flyspell-mode)
     (prog-mode . flyspell-prog-mode))
    :config
    (general-define-key
     "C-l" 'flyspell-auto-correct-previous-word)

    (with-eval-after-load "ispell"
      (setenv "LANG" "en_US.UTF-8")
      (setq ispell-program-name "hunspell")
      (setq ispell-dictionary "en_US,sv")

      ;; ispell-set-spellchecker-params has to be called before ispell-hunspell-add-multi-dic
      (ispell-set-spellchecker-params)
      (ispell-hunspell-add-multi-dic "en_US,sv")
      (setq ispell-personal-dictionary "~/.hunspell_personal")))

#+end_src

** History

#+begin_src emacs-lisp

  ;; save text entered in minibuffer prompts
  (setq history-length 25)
  (savehist-mode 1)

  ;; save cursor position in files
  (save-place-mode 1)

  ;; remember recently edited files
  (recentf-mode 1)

  ;; auto reload non-file buffers
  (setq global-auto-revert-non-file-buffers t)

#+end_src

** Undo Tree

[[https://www.emacswiki.org/emacs/UndoTree][Undo Tree]] allows for visualization of undos in a file.

#+begin_src emacs-lisp

  (use-package undo-tree
    :defer t
    :diminish undo-tree-mode
    :init (global-undo-tree-mode)
    :custom
    (undo-tree-visualizer-diff t)
    (undo-tree-history-directory-alist `(("." . ,(expand-file-name ".backup" user-emacs-directory))))
    (undo-tree-visualizer-timestamps t))

#+end_src

** Keybindings
*** General Package

An easier way to set keybindings with [[https://github.com/noctuid/general.el][general]].

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-create-definer my/leader-keys
      :keymaps '(normal visual emacs)
      :prefix ","
      :global-prefix ",")

    ;; make esc quit prompts
    (general-define-key
     "<escape>" 'keyboard-escape-quit)

    (general-define-key
     "C-=" #'text-scale-increase
     "C-+" #'text-scale-increase
     "C--" #'text-scale-decrease))

#+end_src

*** Evil Mode

[[https://github.com/emacs-evil/evil][Evil]] provides a Vi mode for Emacs, as well as surround functionality with [[https://github.com/emacs-evil/evil-surround][evil-surround]].

#+begin_src emacs-lisp

  (use-package evil
    :diminish
    :demand t
    :bind (
       ("C-z" . evil-local-mode)

       :map evil-normal-state-map
       ("C-w h" . evil-window-left)
       ("C-w j" . evil-window-down)
       ("C-w k" . evil-window-up)
       ("C-w l" . evil-window-right)

       :map evil-insert-state-map
       ("C-h" . evil-delete-backward-char-and-join))

    :hook
    (evil-mode . my/evil-hook)
    (doc-view-mode . turn-off-evil-mode)

    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-search-module 'evil-search)

    :config
    (defun my/evil-hook () ; modes to disable evil in
      (dolist (mode '(custom-mode
              eshell-mode
              git-rebase-mode
              erc-mode
              term-mode
              ansi-term-mode))
    (add-to-list 'evil-emacs-state-modes mode)))

    (evil-mode 1)
    (evil-set-undo-system 'undo-redo)

    ;; horizontal movement crosses lines
    (setq-default evil-cross-lines t)

    ;; move on visual lines unless a count is involved
    (with-eval-after-load 'evil
      (evil-define-motion evil-next-line (count)
    "Move the cursor COUNT screen lines down."
    :type line
    (let ((line-move-visual (unless count t)))
      (evil-line-move (or count 1))))

      (evil-define-motion evil-previous-line (count)
    "Move the cursor COUNT lines up."
    :type line
    (let ((line-move-visual (unless count t)))
      (evil-line-move (- (or count 1)))))))

  ;; more vim keybindings (in non-file buffers)
  (use-package evil-collection
    :after evil
    :diminish
    :config
    (evil-collection-init))

  ;; even even more vim keybindings (adds surround functionality)
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))

#+end_src

** Hydra

[[https://github.com/abo-abo/hydra][Hydra]] provides temporary command buffers.

#+begin_src emacs-lisp

  (use-package hydra
    :config
    (my/leader-keys
      "t" '(hydra-theme/body :which-key "choose theme")
      "r" '(hydra-window/body :which-key "resize window")
      "s" '(hydra-text-scale/body :which-key "scale text")))

#+end_src

*** Choose Theme

#+begin_src emacs-lisp

  (defhydra hydra-theme (:timeout 4)
    "choose theme"
    ("d" (my/enable-theme 'doom-one) "doom one")
    ("s" (my/enable-theme 'spaceway) "spaceway")
    ("o" (my/enable-theme 'modus-operandi) "modus-operandi")
    ("v" (my/enable-theme 'modus-vivendi) "modus-vivendi")
    ("f" nil "finished" :exit t))

  (defun my/disable-all-themes ()
    "Disable all active themes."
    (dolist (theme custom-enabled-themes)
      (disable-theme theme)))

  (defun my/enable-theme (theme)
    "Enable the specified THEME and disable all other themes."
    (my/disable-all-themes)
    (load-theme theme t)
    (customize-save-variable 'my-chosen-theme theme))

  (add-hook 'after-init-hook
            (lambda ()
              (if (boundp 'my-chosen-theme)
                  (my/enable-theme my-chosen-theme)
                (my/enable-theme 'modus-vivendi))))

#+end_src

*** Resize Window

#+begin_src emacs-lisp

  (defhydra hydra-window (:timeout 4)
    "resize window"
    ("h" (window-width-decrease) "decrease width")
    ("j" (window-height-increase) "increase height")
    ("k" (window-height-decrease) "decrease height")
    ("l" (window-width-increase) "increase width")
    ("f" nil "finished" :exit t))

  ;; resizes the window width based on the input
  (defun resize-window-width (w)
    "Resizes the window width based on W."
    (interactive (list (if (> (count-windows) 1)
                           (read-number "Set the current window width in [1~9]x10%: ")
                         (error "You need more than 1 window to execute this function!"))))
    (message "%s" w)
    (window-resize nil (- (truncate (* (/ w 10.0) (frame-width))) (window-total-width)) t))

  ;; resizes the window height based on the input
  (defun resize-window-height (h)
    "Resizes the window height based on H."
    (interactive (list (if (> (count-windows) 1)
                           (read-number "Set the current window height in [1~9]x10%: ")
                         (error "You need more than 1 window to execute this function!"))))
    (message "%s" h)
    (window-resize nil (- (truncate (* (/ h 10.0) (frame-height))) (window-total-height)) nil))

  (defun resize-window (width delta)
    "Resize the current window's size.  If WIDTH is non-nil, resize width by some DELTA."
    (if (> (count-windows) 1)
        (window-resize nil delta width)
      (error "You need more than 1 window to execute this function!")))

  ;; shorcuts for window resize width and height
  (defun window-width-increase ()
    (interactive)
    (resize-window t 5))

  (defun window-width-decrease ()
    (interactive)
    (resize-window t -5))

  (defun window-height-increase ()
    (interactive)
    (resize-window nil 5))

  (defun window-height-decrease ()
    (interactive)
    (resize-window nil -5))

#+end_src

*** Scale Text

#+begin_src emacs-lisp

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

#+end_src

** Dired

Hide details and highlight the current line in =dired=. Reuse =dired= buffers with [[https://codeberg.org/amano.kenji/dired-single][dired-single]].

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :hook (dired-mode . (lambda () (dired-hide-details-mode)))
    :config
    (setq dired-free-space nil)

    (use-package dired-single) ; reuse buffer
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer)

    (use-package nerd-icons-dired ; use nerd icons in dired
    :diminish
    :hook
    (dired-mode . nerd-icons-dired-mode)))


#+end_src

** Help functionality
*** Counsel and Ivy

[[https://github.com/abo-abo/swiper][Counsel and Ivy]] provide generic completion and enhanced versions of common Emacs commands.

#+begin_src emacs-lisp

  ;; helpful ui additions
  (use-package counsel
    :diminish
    :bind (("M-x" . counsel-M-x)
       ("C-M-j" . counsel-switch-buffer)
       ("C-x C-f" . counsel-find-file))

    :config
    (counsel-mode 1)
    (define-key ivy-minibuffer-map (kbd "C-h") 'delete-backward-char))

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
       :map ivy-minibuffer-map
       ("TAB" . ivy-alt-done)
       ("C-l" . ivy-alt-done)
       :map ivy-switch-buffer-map
       ("C-l" . ivy-done)
       ("C-d" . ivy-switch-buffer-kill)
       :map ivy-reverse-i-search-map
       ("C-d" . ivy-reverse-i-search-kill))

    :config
    (ivy-mode 1)
    (setq ivy-initial-inputs-alist nil) ; hide "^" from ivy minibuffer
    (define-key ivy-minibuffer-map (kbd "C-h") 'delete-backward-char))

  ;; helpful information for functions in minibuffers
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  ;; command history for ivy
  (use-package prescient)

  ;; ivy integration for prescient
  (use-package ivy-prescient
    :init
    (ivy-prescient-mode 1))

#+end_src

*** Helpful

A better help buffer with [[https://github.com/Wilfred/helpful][helpful]].

#+begin_src emacs-lisp

  ;; more detailed help pages
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

*** Which Key

[[https://github.com/justbur/emacs-which-key][Which Key]] displays available keybindings in a popup buffer.

#+begin_src emacs-lisp

  ;; display help for next command keystroke
  (use-package which-key
    :diminish
    :config
    (which-key-mode 1))

#+end_src

*** Discover My Major

[[https://github.com/jguenther/discover-my-major][Discover My Major]], a feature that discovers key bindings and their meaning for the current Emacs major mode.

#+begin_src emacs-lisp

  (use-package discover-my-major
    :bind ("C-h C-m" . discover-my-major))

#+end_src

** Terminal

A better terminal emulation with [[https://github.com/akermu/emacs-libvterm][vterm]].

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :bind ("C-x t" . vterm)
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
    (setq vterm-shell "zsh")
    (setq vterm-max-scrollback 10000))

#+end_src

** Smooth Scrolling

#+begin_src emacs-lisp

  (setq scroll-step 1)
  (setq scroll-margin 1)
  (setq scroll-conservatively 101)
  (setq scroll-up-aggressively 0.01)
  (setq scroll-down-aggressively 0.01)
  (setq auto-window-vscroll nil)
  (setq fast-but-imprecise-scrolling nil)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
  (setq mouse-wheel-progressive-speed nil)
  ;; Horizontal Scroll
  (setq hscroll-step 1)
  (setq hscroll-margin 1)

#+end_src

* UI Enhancements
** Font & Icons
*** Font

#+begin_src emacs-lisp

  (add-to-list 'default-frame-alist '(font . "Ubuntu Mono-17"))

#+end_src

*** Icons

*Prerequisite*: Install nerd icons with =M-x nerd-icons-install-fonts=.

#+begin_src emacs-lisp

  ;; nerd icons
  (use-package nerd-icons)

#+end_src

** Modeline

Better modeline with [[https://github.com/jessiehildebrandt/mood-line][mood-line]].

#+begin_src emacs-lisp

  (use-package mood-line
    :config
    (mood-line-mode 1)
    (column-number-mode t)) ; show column no. in modeline

#+end_src

** Themes

I like [[https://github.com/doomemacs/themes][Doom One]], Modus Themes, and [[https://github.com/Gavinok/emacs.d/tree/main/lisp/spaceway][Spaceway]].

#+begin_src emacs-lisp

  (use-package doom-themes)

  (use-package spaceway-theme
    :ensure nil
    :load-path "elisp/spaceway/")

  ;; disable border around modelines
  (custom-set-faces
   '(mode-line ((t (:box nil))))
   '(mode-line-inactive ((t (:box nil)))))

#+end_src

** Popup Buffers

Popup buffers with [[https://github.com/karthink/popper][popper]].

#+begin_src emacs-lisp

  (use-package popper
    :bind (("C-å"   . popper-toggle)
       ("M-å"   . popper-cycle)
       ("C-M-å" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
      '("\\*Messages\\*"
        "\\*Warnings\\*"
        "\\*Compile-Log\\*"
        "Output\\*$"
        "\\*Async Shell Command\\*"
        help-mode
        compilation-mode
        "^\\*compilation.*\\*$" comint-mode
        "^\\*eshell.*\\*$" eshell-mode
        "^\\*shell.*\\*$"  shell-mode
        "^\\*term.*\\*$"   term-mode
        "^\\*vterm.*\\*$"  vterm-mode
        "^\\*ansi-term.*\\*$"  ansi-term-mode
        "^\\*helpful.*\\*$" helpful-mode))
    (popper-mode +1)
    (popper-echo-mode +1)
    (setq popper-mode-line " POP "))

#+end_src

** Line Numbers & Highlight Current Line

#+begin_src emacs-lisp

  ;; turn on line numbers and highlight current line
  (dolist (hook '(prog-mode-hook text-mode-hook markdown-mode-hook org-mode-hook))
    (add-hook hook 'display-line-numbers-mode)
    (add-hook hook 'hl-line-mode))

  ;; relative line numbers
  (setq display-line-numbers-type 'relative)

#+end_src

** Title Bar

#+begin_src emacs-lisp

  (setq frame-title-format '((:eval (if (buffer-file-name)
                                        (abbreviate-file-name (buffer-file-name))
                                      "%b"))))

#+end_src

** Dashboard

The [[https://github.com/emacs-dashboard/emacs-dashboard][Dashboard]] package displays a customizable dashboard.

#+begin_src emacs-lisp

      (use-package dashboard
        :demand
        :diminish (dashboard-mode page-break-lines-mode)
        :custom
        (dashboard-items '((bookmarks . 7)
                           (projects . 5)
                           (recents . 4)))
        :config
        (dashboard-setup-startup-hook)
        (setq dashboard-center-content t)
        (setq dashboard-set-footer nil)
        (setq dashboard-display-icons-p nil))

      ;; set dashboard buffer as initial buffer choice
      (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))

      ;; hook dashboard-open to creation of new frame
      (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                  (dashboard-open))))


#+end_src

* General Programming
** Prog Mode

#+begin_src emacs-lisp

  (use-package prog-mode
    :ensure nil
    :mode "\\.edn\\'")

#+end_src

** LSP

Programming functionalities with [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]], a client/library for the Language Server Protocol.

#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands lsp
    :hook ((java-mode . lsp-deferred)
           (tex-mode . lsp-deferred))
    :custom
    (lsp-keymap-prefix "C-c l")
    (lsp-auto-guess-root nil)
    (lsp-prefer-flymake nil) ; use flycheck instead of flymake
    (lsp-enable-file-watchers nil)
    (lsp-enable-folding nil)
    (read-process-output-max (* 1024 1024))
    (lsp-keep-workspace-alive nil)
    (lsp-eldoc-hook nil)
    (lsp-enable-which-key-integration t)

    ;; headerline breadcrumb
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file))
    (lsp-headerline-breadcrumb-mode)

    :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
    :config
    (setq lsp-headerline-breadcrumb-icons-enable nil)
    (setq lsp-modeline-code-action-fallback-icon "[A]")

    (defun lsp-update-server ()
      "Update LSP server."
      (interactive)
      ;; equals to `C-u M-x lsp-install-server'
      (lsp-install-server t))

    ;; ivy integration
    (use-package lsp-ivy
      :after lsp)

    ;; treemacs integration
    (use-package lsp-treemacs
      :after lsp))

#+end_src

*** LSP UI

[[https://github.com/emacs-lsp/lsp-ui][lsp-ui]] provides all higher level UI modules for lsp-mode.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :after lsp-mode
    :diminish
    :commands lsp-ui-mode
    :custom-face
    (lsp-ui-doc-background ((t (:background nil))))
    (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
    :bind
    (:map lsp-ui-mode-map
          ("M-r" . lsp-ui-peek-find-definitions)
          ("M-?" . lsp-ui-peek-find-references)
          ("C-c u" . lsp-ui-imenu)
          ("M-i" . lsp-ui-doc-focus-frame))
    :custom
    (lsp-ui-doc-header t)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-doc-border (face-foreground 'default))
    (lsp-ui-sideline-enable nil)
    (lsp-ui-sideline-ignore-duplicate t)
    (lsp-ui-sideline-show-code-actions nil)
    :config
    ;; use lsp-ui-doc-webkit only in GUI
    (when (display-graphic-p)
      (setq lsp-ui-doc-use-webkit t))
    ;; `C-g'to close doc
    (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide))

#+end_src

** DAP

[[https://github.com/emacs-lsp/dap-mode][Debug Adapter Protocol Mode]], a client/library for the Debug Adapter Protocol.

#+begin_src emacs-lisp

  (use-package dap-mode
    :diminish
    :bind
    (:map dap-mode-map
          (("<f12>" . dap-debug)
           ("<f8>" . dap-continue)
           ("<f9>" . dap-next)
           ("<M-f11>" . dap-step-in)
           ("C-M-<f11>" . dap-step-out)
           ("<f7>" . dap-breakpoint-toggle))))

#+end_src

** Flycheck

A syntax checking extension.

#+begin_src emacs-lisp

  (use-package flycheck
    :defer t
    :diminish
    :hook (after-init . global-flycheck-mode)
    :commands (flycheck-add-mode)
    :bind ("C-c f e" . flycheck-list-errors)
    :custom
    (flycheck-global-modes
     '(not outline-mode diff-mode shell-mode eshell-mode term-mode))
    (flycheck-emacs-lisp-load-path 'inherit)
    (flycheck-indication-mode (if (display-graphic-p) 'right-fringe 'right-margin))
    :init
    (if (display-graphic-p)
        (use-package flycheck-posframe
          :custom-face
          (flycheck-posframe-face ((t (:foreground ,(face-foreground 'success)))))
          (flycheck-posframe-info-face ((t (:foreground ,(face-foreground 'success)))))
          :hook (flycheck-mode . flycheck-posframe-mode)
          :custom
          (flycheck-posframe-position 'window-bottom-left-corner)
          (flycheck-posframe-border-width 3)
          (flycheck-posframe-inhibit-functions
           '((lambda (&rest _) (bound-and-true-p company-backend)))))
      (use-package flycheck-pos-tip
        :defines flycheck-pos-tip-timeout
        :hook (flycheck-mode . flycheck-pos-tip-mode)
        :custom (flycheck-pos-tip-timeout 30)))
    :config
    (use-package flycheck-popup-tip
      :hook (flycheck-mode . flycheck-popup-tip-mode))

    (when (fboundp 'define-fringe-bitmap)
      (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
        [16 48 112 240 112 48 16] nil nil 'center)))

#+end_src

** Completions

Programming completions with [[https://github.com/company-mode/company-mode][company]]. [[https://github.com/sebastiencs/company-box][company-box]] provides a front-end with icons.

#+begin_src emacs-lisp

  (use-package company
    :diminish
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
       ("<tab>" . company-complete-selection))
      (:map lsp-mode-map
       ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :diminish
    :hook (company-mode . company-box-mode))

#+end_src

** Comments

Nice commenting functionality with [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]].

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Match Delimiters

Match delimiters with [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]].

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . (lambda () (rainbow-delimiters-mode))))

#+end_src

** Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Projects")
      (setq projectile-project-search-path '("~/Projects")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit

#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

#+RESULTS:

* Programming
** Java

Emacs Java IDE with [[https://github.com/emacs-lsp/lsp-java][lsp-java]].

*Prerequisite*: Install [[https://maven.apache.org/download.cgi][Maven]] and ensure it's in PATH.

#+begin_src emacs-lisp

  (use-package lsp-java
    :after lsp-mode
    :if (executable-find "mvn")
    :init
    (use-package request :defer t)
    :custom
    (lsp-java-server-install-dir (expand-file-name "~/.emacs.d/eclipse.jdt.ls/server/"))
    (lsp-java-workspace-dir (expand-file-name "~/.emacs.d/eclipse.jdt.ls/workspace/")))

#+end_src
** Python

#+begin_src emacs-lisp

  (use-package python-mode
    :ensure nil
    :after flycheck
    :mode "\\.py\\'"
    :custom
    (python-indent-offset 4)
    (flycheck-python-pycompile-executable "python3")
    (python-shell-interpreter "python3"))

#+end_src

** TeX

AUCTeX, an extensible package for writing and formatting TeX files. It supports many different TeX macro packages, including AMS-TEX, LaTeX, Texinfo, ConTEXt, and docTEX (dtx files).

*Prerequisite*: Please install [[https://www.tug.org/texlive/quickinstall.html][TeX Live]].


#+begin_src emacs-lisp

  (use-package tex
  :ensure auctex
  :defer t
  :custom
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-master nil)
  ;; to use pdfview with auctex
  (TeX-view-program-selection '((output-pdf "pdf-tools"))
                              TeX-source-correlate-start-server t)
  (TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))
  (TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  :hook
  (LaTeX-mode . (lambda ()
                  (turn-on-reftex)
                  (setq reftex-plug-into-AUCTeX t)
                  (reftex-isearch-minor-mode)
                  (setq TeX-PDF-mode t)
                  (setq TeX-source-correlate-method 'synctex)
                  (setq TeX-source-correlate-start-server t))))

#+end_src
* Office
** Org

I organize my life with [[https://orgmode.org/][Org Mode]]. The following headers all add and modify Org Mode's functionalities.

#+begin_src emacs-lisp

  (use-package org
    :pin nongnu
    :ensure org-contrib ; needed for org-contacts
    :bind (("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           ("C-c l" . org-store-link))
    :config
    (setq org-directory "~/Documents/notes/org")
    (setq org-default-notes-file (concat org-directory "/capture.org"))
    (setq org-todo-keywords '((sequence "TODO" "NEXT" "|" "DONE")))
    (setq org-tags-column 0)
    (setq org-startup-folded t)
    (setq org-export-backends '(md org ascii html icalendar latex odt rss))

    (defun my/org-insert-heading-at-point ()
      "Insert a new heading at the current line in Org mode."
      (interactive)
      (org-insert-heading)
      (org-metaright))

    (define-key org-mode-map (kbd "M-RET") 'my/org-insert-heading-at-point)

    ;; remap org indentation keys
    (with-eval-after-load 'org
      (general-define-key
       :keymaps 'org-mode-map
       "C-c i" 'org-metaright
       "C-c u" 'org-metaleft
       "M-RET" 'my/org-insert-heading-at-point)))

#+end_src

*** Org Agenda

[[https://orgmode.org/manual/Agenda-Views.html][Org Agenda]] is a buffer for displaying your org todo items.

#+begin_src emacs-lisp

  (use-package org-agenda
    :ensure nil
    :after org
    :config
    (setq org-agenda-span 'day)
    (setq org-agenda-tags-column 0)
    (setq org-agenda-start-on-weekday nil)
    (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
    (setq org-agenda-skip-deadline-if-done t)
    (setq org-agenda-skip-scheduled-if-done t)
    (setq org-agenda-todo-list-sublevels t)
    (setq org-agenda-scheduled-leaders '("" ""))
    (setq org-element-use-cache nil) ; org element cache often produced errors, so I disabled it

    ;; date heading settings
    (custom-set-faces
     '(org-agenda-date ((t (:height 1.0 :weight bold :background nil))))
     '(org-agenda-date-today ((t (:height 1.3 :weight bold :background nil)))))

    ;; add newline above date heading
    (setq org-agenda-format-date
          (lambda (date)
            (concat "\n" (org-agenda-format-date-aligned date))))

    ;; time grid settings
    (setq org-agenda-time-grid
      '((daily today require-timed remove-match)
        (800 1000 1200 1400 1600 1800 2000)
        "...." "------------")
      org-agenda-current-time-string
      "← now"))

#+end_src

**** Org Super Agenda

[[https://github.com/alphapapa/org-super-agenda][Org Super Agenda]] filters and groups agenda items, making for a cleaner look.

#+begin_src emacs-lisp

  (use-package org-super-agenda
    :after org-agenda
    :config
    (org-super-agenda-mode)

    ;; only apply super agenda groups on org-agenda-list
    (defun my-org-agenda-list (orig-fun &rest args)
      (let ((org-super-agenda-groups
             '((:name "Schedule"
                      :time-grid t)
               (:name "Studier"
                      :and (:category "studier" :deadline today))
               (:name "Privat"
                      :and (:category ("privat" "capture" "computer") :deadline today))
               (:name "Upcoming Deadlines"
                      :deadline future)
               (:name "Vanor"
                      :habit t)
               (:discard (:anything t)))))
        (apply orig-fun args)))

    (advice-add 'org-agenda-list :around #'my-org-agenda-list))

#+end_src

*** Org Capture

[[https://orgmode.org/manual/Capture.html][Org Capture]] lets you quickly store notes.

#+begin_src emacs-lisp

  (use-package org-capture
    :ensure nil
    :after org
    :config
    ;; don't save org capture bookmarks
    (setq org-bookmark-names-plist nil)
    (setq org-capture-bookmark nil)
    :custom
    (org-capture-templates
     '(
       ("t" "Task")

       ("tt" "Task" entry (file+headline "" "Tasks")
    "* TODO %?\n  %i\n")

       ("tl" "Task with link" entry (file+headline "" "Tasks")
    "* TODO %?\n  %i\n %a")

       ("n" "Note" entry (file+headline "" "Notes")
    "* %?\n %i\n")

       ("c" "Contact" entry (file+headline "" "Contacts")
    "* %?
          :PROPERTIES:
          :PHONE: %^{phone number}
          :ADDRESS: %^{Street name Street no., Postal Code Postal Area, Country}
          :BIRTHDAY: %^{yyyy-mm-dd}
          :EMAIL: %^{name@domain.com}
          :NOTE: %^{NOTE}
          :END:")

       ("e" "Calendar event" entry (file+headline "calendar.org" "Calendar")
    "* %?\n %^t")

       ("m" "Media")

       ("mb" "Book" entry (file+headline "backlog.org" "Books")
    "* %?\n %i\n")

       ("mm" "Movie" entry (file+headline "backlog.org" "Movies")
    "* %?\n %i\n")

       ("mw" "Web Capture" entry (file+headline "backlog.org" "Web")
    "* %i\n%U\n\n"))))

#+end_src

*** Org Habit

[[https://orgmode.org/manual/Tracking-your-habits.html][Org Habit]] gives the ability to track habits.

#+begin_src emacs-lisp

  (use-package org-habit
    :ensure nil
    :after org
    :config
    (setq org-habit-show-habits-only-for-today t)

    ;; the org habit graph changes colors per theme,
    ;; so I define consistent colors for the habit graph
    (custom-set-faces
     '(org-habit-clear-face ((t (:background "#1468de"))))
     '(org-habit-clear-future-face ((t (:background "#1468de"))))
     '(org-habit-ready-face ((t (:background "#14de4a"))))
     '(org-habit-ready-future-face ((t (:background "#14de4a"))))
     '(org-habit-alert-face ((t (:background "#f0f00c"))))
     '(org-habit-alert-future-face ((t (:background "#f0f00c"))))
     '(org-habit-overdue-face ((t (:background "#f00c0c"))))
     '(org-habit-overdue-future-face ((t (:background "#f00c0c"))))))

#+end_src

*** Org Contacts

Contacts in Org Mode with [[https://orgmode.org/worg/org-contrib/org-contacts.html][Org Contacts]].

#+begin_src emacs-lisp

  (use-package org-contacts
    :after org
    :custom (org-contacts-files '("~/Documents/notes/org/contacts.org")))

#+end_src

*** Org Babel

Active code blocks in org files with [[https://orgmode.org/worg/org-contrib/babel/][Org Babel]].

#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (java . t)))

  (setq org-confirm-babel-evaluate nil)
  (org-babel-tangle-file "~/.emacs.d/init.org")

  ;; block templates
  (setq org-structure-template-alist
        '(("l" . "src emacs-lisp")
          ("j" . "src java")
          ("s" . "src")
          ("e" . "example")
          ("q" . "quote")))

#+end_src

** Calendar

Calendar framework with [[https://github.com/kiwanami/emacs-calfw][calfw]]. [[https://github.com/ml729/calfw-blocks][calfw-blocks]] provides visual time blocks.

#+begin_src emacs-lisp

  (use-package calfw
    :config
    ;; integrate calfw with org
    (use-package calfw-org
      :after calfw)

    ;; visual time blocks
    (use-package calfw-blocks
      :ensure nil
      :demand t
      :after calfw
      :load-path ("~/.emacs.d/elisp/calfw-blocks")
      :bind ((:map cfw:calendar-mode-map
                  ("w" . calfw-blocks-change-view-block-week)
                  ("t" . calfw-blocks-change-view-transpose-two-weeks))
             ("C-c o" . my/custom-open-calendar))
      :config
      (setq calfw-blocks-earliest-visible-time '(7 0))
      (setq calfw-blocks-default-event-length 1)
      (setq calfw-blocks-lines-per-hour 4))

    ;; use swedish calendar
    (load "sv-kalender")

    ;; open calendar with two weeks view
    (defun my/custom-open-calendar ()
      (interactive)
      (cfw:open-calendar-buffer
       :contents-sources
       (list
        (cfw:org-create-source "medium purple"))
       :view 'transpose-two-weeks)))

#+end_src

** PlantUML & Graphviz

PlantUML Mode, a major mode for editing PlantUML sources.

*Prerequisite*:

1. Install [[https://plantuml.com/download][PlantUML]] and configure =(org-plantuml-jar-path (expand-file-name "path/to/plantuml.jar"))=.
2. Install [[https://graphviz.gitlab.io/download/][Graphviz]] on your system to support graph visualization.

#+begin_src emacs-lisp

  (use-package plantuml-mode
    :defer t
    :custom
    (org-plantuml-jar-path (expand-file-name "~/tools/plantuml/plantuml.jar")))

#+end_src

** Mail

#+begin_src emacs-lisp

  (use-package mu4e
    :ensure nil
    :defer 20 ; load 20 s after startup
    :commands (mu4e make-mu4e-context)
    :bind
    (("C-x m" . mu4e)
     (:map mu4e-view-mode-map
       ("e" . mu4e-view-save-attachment)))
    :config
    (add-to-list 'gnutls-trustfiles (expand-file-name "~/.config/protonmail/bridge/cert.pem"))
    (setq
     ;; User info
     user-mail-address "mlonna@pm.me"
     user-full-name  "Martin Lönn Andersson"

     ;; Maildir setup
     mu4e-maildir "~/.mail"
     mu4e-attachment-dir "~/Downloads"

     ;; Fetch mail
     mu4e-get-mail-command "mbsync -a"
     mu4e-change-filenames-when-moving t   ; needed for mbsync
     mu4e-update-interval 120              ; update every 2 minutes

     ;; Send mail
     message-send-mail-function 'smtpmail-send-it
     smtpmail-auth-credentials "~/.authinfo"
     smtpmail-smtp-server "127.0.0.1"
     smtpmail-smtp-service 1025
     smtpmail-stream-type 'starttls

     ;; Other options
     mu4e-confirm-quit nil
     mu4e-compose-format-flowed t ; re-flow mail so it's not hard wrapped
     ))


#+end_src

** PDF Tools

#+begin_src emacs-lisp

  (use-package pdf-tools
    :mode "\\.pdf\\'"
    :custom
    (TeX-view-program-selection '(output-pdf "pdf-tools"))
    :config
    (pdf-tools-install))

#+end_src

* Miscellaneous

#+begin_src emacs-lisp

  ;; soft-wrap text
  (global-visual-line-mode t)

  ;; tabs are four spaces
  (setq-default tab-width 4
                indent-tabs-mode nil)

  ;; set language environment
  (set-language-environment "UTF-8")

  ;; clean up unneccesary whitespace on save
  (add-hook 'before-save-hook 'whitespace-cleanup)

  ;; map yes and no to y and n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; disable visual and audible bell
  (setq ring-bell-function 'ignore)

  ;; increase large file warning threshold
  (setq large-file-warning-threshold 100000000)

  ;; automatically reload files when changed
  (global-auto-revert-mode t)

  ;; automatically kill all active processes when closing Emacs
  (setq confirm-kill-processes nil)

  ;; add a newline automatically at the end of the file upon save
  (setq require-final-newline t)

#+end_src

* Tangle & Reload On Save

These hooks will ask to tangle all code blocks and reload configuration on save.

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t)
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
;; End:
