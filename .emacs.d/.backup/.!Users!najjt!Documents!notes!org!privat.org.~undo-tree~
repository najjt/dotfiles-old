(undo-tree-save-format-version . 1)
"848b0dfa0595793c0e9fecc354a1d1100058a7dd"
[nil nil nil nil (26025 48234 400523 0) 0 nil]
([nil nil ((#(":LAST_REPEAT: [2024-01-18 Thu 12:03]
" 0 13 (face org-special-keyword fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 13 14 (fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 14 35 (keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-date fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 35 36 (rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-date fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 36 37 (fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1953) (undo-tree-id126 . -37) (undo-tree-id127 . -7) (undo-tree-id128 . -7) (undo-tree-id129 . -7) (undo-tree-id130 . -7) (undo-tree-id131 . -7) (undo-tree-id132 . -7) (undo-tree-id133 . -7) (undo-tree-id134 . -7) (undo-tree-id135 . -7) (undo-tree-id136 . -7) (undo-tree-id137 . -7) (undo-tree-id138 . -7) (undo-tree-id139 . -7) (undo-tree-id140 . -7) (undo-tree-id141 . -7) (undo-tree-id142 . -7) (undo-tree-id143 . -7) (undo-tree-id144 . -7) (undo-tree-id145 . -7) (undo-tree-id146 . -7) (undo-tree-id147 . -7) (undo-tree-id148 . -7) (undo-tree-id149 . -7) (undo-tree-id150 . -7) (undo-tree-id151 . -7) (undo-tree-id152 . -7) (undo-tree-id153 . -7) (undo-tree-id154 . -7) (undo-tree-id155 . -7) (undo-tree-id156 . -7) (undo-tree-id157 . -7) (undo-tree-id158 . -7) (undo-tree-id159 . -7) (undo-tree-id160 . -7) (undo-tree-id161 . -7) (undo-tree-id162 . -7) (undo-tree-id163 . -7) (undo-tree-id164 . -7) (undo-tree-id165 . -7) (undo-tree-id166 . -37) (undo-tree-id167 . -36) 1960 (t 26025 32297 817788 106000)) nil (26025 48234 400521 0) 0 nil])
([nil nil ((#("- State \"DONE\"       from \"TODO\"       [2024-01-17 Wed 22:03]
- State \"DONE\"       from \"TODO\"       [2024-01-08 Mon 11:41]
" 0 39 (fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 39 60 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 60 61 (face org-date rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 61 101 (fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 101 122 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 122 123 (face org-date rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 123 124 (fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1959) (undo-tree-id62 . -66) (undo-tree-id63 . -7) (undo-tree-id64 . -7) (undo-tree-id65 . -7) (undo-tree-id66 . -7) (undo-tree-id67 . -7) (undo-tree-id68 . -7) (undo-tree-id69 . -7) (undo-tree-id70 . -7) (undo-tree-id71 . -7) (undo-tree-id72 . -7) (undo-tree-id73 . -123) (undo-tree-id74 . -4) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -4) (undo-tree-id78 . -4) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -4) (undo-tree-id82 . -4) (undo-tree-id83 . -4) (undo-tree-id84 . -66) (undo-tree-id85 . -4) (undo-tree-id86 . -66) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -4) (undo-tree-id96 . -4) (undo-tree-id97 . -4) (undo-tree-id98 . -4) (undo-tree-id99 . -4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) (undo-tree-id102 . -4) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) (undo-tree-id109 . -66) (undo-tree-id110 . -66) (undo-tree-id111 . -66) (undo-tree-id112 . -66) (undo-tree-id113 . -66) (undo-tree-id114 . -66) (undo-tree-id115 . -66) (undo-tree-id116 . -66) (undo-tree-id117 . -66) (undo-tree-id118 . -66) (undo-tree-id119 . -66) (undo-tree-id120 . -66) (undo-tree-id121 . -66) (undo-tree-id122 . -66) (undo-tree-id123 . -66) (undo-tree-id124 . -66) (undo-tree-id125 . -124) 2025) nil (26025 48234 400489 0) 0 nil])
([nil nil ((#("8" 0 1 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1911) (undo-tree-id61 . -1)) nil (26025 48234 400450 0) 0 nil])
([nil nil ((1910 . 1912) (#("1" 0 1 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1910) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) 1911) nil (26025 48234 400447 0) 0 nil])
([nil nil ((1913 . 1916) (#("Thu" 0 3 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1913) (undo-tree-id0 . -2) (undo-tree-id1 . -2) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (undo-tree-id4 . -2) (undo-tree-id5 . -2) (undo-tree-id6 . -2) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -2) (undo-tree-id24 . -2) (undo-tree-id25 . -2) (undo-tree-id26 . -2) (undo-tree-id27 . -2) (undo-tree-id28 . -3) (undo-tree-id29 . -3)) nil (26025 48234 400426 0) 0 nil])
([nil nil ((148 . 151) (146 . 148) (145 . 146) (126 . 145) (124 . 126) (nil org-fold--spec-org-fold-outline-1035431620870602038 org-fold-outline 123 . 124) (nil isearch-open-invisible org-fold-core--isearch-show 123 . 124) (nil isearch-open-invisible-temporary org-fold-core--isearch-show-temporary 123 . 124) (nil face org-date 123 . 124) (nil fontified t 123 . 124) (nil org-category "privat" 123 . 124) (123 . 124) (t 26025 48234 406305 995000) 70) nil (26025 48383 302454 0) 0 nil])
([nil nil ((#("* 
" 0 1 (face org-level-1 fontified t) 1 2 (face org-level-1 fontified t) 2 3 (org-category "privat" fontified t)) . 149) (undo-tree-id1409 . -2) (undo-tree-id1410 . 1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -2) (undo-tree-id1413 . -2) (undo-tree-id1414 . -2) (undo-tree-id1415 . -2) (undo-tree-id1416 . -2) (undo-tree-id1417 . -2) (undo-tree-id1418 . -2) (undo-tree-id1419 . -2) (undo-tree-id1420 . -2) (undo-tree-id1421 . -2) (undo-tree-id1422 . -2) (undo-tree-id1423 . -2) (undo-tree-id1424 . -2) (undo-tree-id1425 . -2) (undo-tree-id1426 . -2) (undo-tree-id1427 . -2) (undo-tree-id1428 . -2) (undo-tree-id1429 . -2) (undo-tree-id1430 . -2) (undo-tree-id1431 . -2) (undo-tree-id1432 . -2) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -3) 150) nil (26025 48383 302451 0) 0 nil])
([nil nil ((#("* " 0 1 (face org-level-1 fontified t) 1 2 (face org-level-1 fontified t)) . 146) (148 . 151) 147) nil (26025 48383 302424 0) 0 nil])
([nil nil ((149 . 153)) nil (26025 48383 302423 0) 0 nil])
([nil nil ((#("** " 0 1 (face org-level-1 fontified t) 1 2 (face org-level-1 fontified t) 2 3 (face org-level-1 fontified t)) . 146) (149 . 153) 152) nil (26025 48383 302422 0) 0 nil])
([nil nil ((#("*** " 0 1 (face org-level-1 fontified t) 1 2 (face org-level-1 fontified t) 2 3 (face org-level-1 fontified t) 3 4 (face org-level-1 fontified t)) . 146) (150 . 153) 153) nil (26025 48383 302421 0) 0 nil])
([nil nil ((#("** åter
" 0 1 (face org-level-1 fontified t) 1 2 (face org-level-1 fontified t) 2 3 (face org-level-1 fontified t) 3 7 (face org-level-1 fontified t) 7 8 (fontified t)) . 146) (undo-tree-id1180 . -7) (undo-tree-id1181 . 1) (undo-tree-id1182 . -6) (undo-tree-id1183 . -3) (undo-tree-id1184 . -3) (undo-tree-id1185 . -3) (undo-tree-id1186 . -3) (undo-tree-id1187 . -3) (undo-tree-id1188 . -3) (undo-tree-id1189 . -3) (undo-tree-id1190 . -3) (undo-tree-id1191 . -3) (undo-tree-id1192 . -3) (undo-tree-id1193 . -3) (undo-tree-id1194 . -3) (undo-tree-id1195 . -3) (undo-tree-id1196 . -3) (undo-tree-id1197 . -3) (undo-tree-id1198 . -3) (undo-tree-id1199 . -3) (undo-tree-id1200 . -3) (undo-tree-id1201 . -3) (undo-tree-id1202 . -3) (undo-tree-id1203 . -3) (undo-tree-id1204 . -3) (undo-tree-id1205 . -8) (undo-tree-id1206 . -8) (undo-tree-id1207 . -8) (undo-tree-id1208 . -8) (undo-tree-id1209 . -8) (undo-tree-id1210 . -8) (undo-tree-id1211 . -8) (undo-tree-id1212 . -8) (undo-tree-id1213 . -8) (undo-tree-id1214 . -8) (undo-tree-id1215 . -8) (undo-tree-id1216 . -8) (undo-tree-id1217 . -8) (undo-tree-id1218 . -8) (undo-tree-id1219 . -8) (undo-tree-id1220 . -8) (undo-tree-id1221 . -8) (undo-tree-id1222 . -8) (undo-tree-id1223 . -8) (undo-tree-id1224 . -8) (undo-tree-id1225 . -8) (undo-tree-id1226 . -8) (undo-tree-id1227 . -8) (undo-tree-id1228 . -8) (undo-tree-id1229 . -8) (undo-tree-id1230 . -8) (undo-tree-id1231 . -8) (undo-tree-id1232 . -8) (undo-tree-id1233 . -8) (undo-tree-id1234 . -8) (undo-tree-id1235 . -8) (undo-tree-id1236 . -8) (undo-tree-id1237 . -8) (undo-tree-id1238 . -8) (undo-tree-id1239 . -8) (undo-tree-id1240 . -8) (undo-tree-id1241 . -8) (undo-tree-id1242 . -8) (undo-tree-id1243 . -8) (undo-tree-id1244 . -8) (undo-tree-id1245 . -8) (undo-tree-id1246 . -8) (undo-tree-id1247 . -8) (undo-tree-id1248 . -8) (undo-tree-id1249 . -8) (undo-tree-id1250 . -3) (undo-tree-id1251 . -3) (undo-tree-id1252 . -3) (undo-tree-id1253 . -3) (undo-tree-id1254 . -3) (undo-tree-id1255 . -3) (undo-tree-id1256 . -3) (undo-tree-id1257 . -3) (undo-tree-id1258 . -3) (undo-tree-id1259 . -3) (undo-tree-id1260 . -3) (undo-tree-id1261 . -3) (undo-tree-id1262 . -3) (undo-tree-id1263 . -3) (undo-tree-id1264 . -3) (undo-tree-id1265 . -3) (undo-tree-id1266 . -3) (undo-tree-id1267 . -3) (undo-tree-id1268 . -3) (undo-tree-id1269 . -3) (undo-tree-id1270 . -3) (undo-tree-id1271 . -3) (undo-tree-id1272 . -4) (undo-tree-id1273 . -4) (undo-tree-id1274 . -4) (undo-tree-id1275 . -4) (undo-tree-id1276 . -4) (undo-tree-id1277 . -4) (undo-tree-id1278 . -4) (undo-tree-id1279 . -4) (undo-tree-id1280 . -4) (undo-tree-id1281 . -4) (undo-tree-id1282 . -4) (undo-tree-id1283 . -5) (undo-tree-id1284 . -5) (undo-tree-id1285 . -5) (undo-tree-id1286 . -5) (undo-tree-id1287 . -5) (undo-tree-id1288 . -5) (undo-tree-id1289 . -5) (undo-tree-id1290 . -5) (undo-tree-id1291 . -5) (undo-tree-id1292 . -5) (undo-tree-id1293 . -5) (undo-tree-id1294 . -6) (undo-tree-id1295 . -6) (undo-tree-id1296 . -6) (undo-tree-id1297 . -6) (undo-tree-id1298 . -6) (undo-tree-id1299 . -6) (undo-tree-id1300 . -6) (undo-tree-id1301 . -6) (undo-tree-id1302 . -6) (undo-tree-id1303 . -6) (undo-tree-id1304 . -6) (undo-tree-id1305 . -7) (undo-tree-id1306 . -7) (undo-tree-id1307 . -7) (undo-tree-id1308 . -7) (undo-tree-id1309 . -7) (undo-tree-id1310 . -7) (undo-tree-id1311 . -7) (undo-tree-id1312 . -7) (undo-tree-id1313 . -7) (undo-tree-id1314 . -7) (undo-tree-id1315 . -7) (undo-tree-id1316 . -6) (undo-tree-id1317 . -6) (undo-tree-id1318 . -6) (undo-tree-id1319 . -6) (undo-tree-id1320 . -6) (undo-tree-id1321 . -6) (undo-tree-id1322 . -6) (undo-tree-id1323 . -6) (undo-tree-id1324 . -6) (undo-tree-id1325 . -6) (undo-tree-id1326 . -6) (undo-tree-id1327 . -6) (undo-tree-id1328 . -6) (undo-tree-id1329 . -6) (undo-tree-id1330 . -6) (undo-tree-id1331 . -6) (undo-tree-id1332 . -6) (undo-tree-id1333 . -6) (undo-tree-id1334 . -6) (undo-tree-id1335 . -6) (undo-tree-id1336 . -6) (undo-tree-id1337 . -6) (undo-tree-id1338 . -6) (undo-tree-id1339 . -6) (undo-tree-id1340 . -6) (undo-tree-id1341 . -6) (undo-tree-id1342 . -6) (undo-tree-id1343 . -6) (undo-tree-id1344 . -6) (undo-tree-id1345 . -6) (undo-tree-id1346 . -6) (undo-tree-id1347 . -6) (undo-tree-id1348 . -6) (undo-tree-id1349 . -6) (undo-tree-id1350 . -6) (undo-tree-id1351 . -6) (undo-tree-id1352 . -6) (undo-tree-id1353 . -6) (undo-tree-id1354 . -6) (undo-tree-id1355 . -6) (undo-tree-id1356 . -6) (undo-tree-id1357 . -6) (undo-tree-id1358 . -6) (undo-tree-id1359 . -6) (undo-tree-id1360 . -6) (undo-tree-id1361 . -6) (undo-tree-id1362 . -6) (undo-tree-id1363 . -6) (undo-tree-id1364 . -6) (undo-tree-id1365 . -6) (undo-tree-id1366 . -6) (undo-tree-id1367 . -6) (undo-tree-id1368 . -6) (undo-tree-id1369 . -6) (undo-tree-id1370 . -6) (undo-tree-id1371 . -6) (undo-tree-id1372 . -6) (undo-tree-id1373 . -6) (undo-tree-id1374 . -6) (undo-tree-id1375 . -6) (undo-tree-id1376 . -6) (undo-tree-id1377 . -6) (undo-tree-id1378 . -6) (undo-tree-id1379 . -6) (undo-tree-id1380 . -6) (undo-tree-id1381 . -6) (undo-tree-id1382 . -6) (undo-tree-id1383 . -6) (undo-tree-id1384 . -6) (undo-tree-id1385 . -6) (undo-tree-id1386 . -6) (undo-tree-id1387 . -6) (undo-tree-id1388 . -6) (undo-tree-id1389 . -6) (undo-tree-id1390 . -6) (undo-tree-id1391 . -6) (undo-tree-id1392 . -6) (undo-tree-id1393 . -6) (undo-tree-id1394 . -6) (undo-tree-id1395 . -6) (undo-tree-id1396 . -6) (undo-tree-id1397 . -6) (undo-tree-id1398 . -6) (undo-tree-id1399 . -6) (undo-tree-id1400 . -6) (undo-tree-id1401 . -6) (undo-tree-id1402 . -6) (undo-tree-id1403 . -6) (undo-tree-id1404 . -6) (undo-tree-id1405 . -6) (undo-tree-id1406 . -6) (undo-tree-id1407 . -6) (undo-tree-id1408 . -8) 152) nil (26025 48383 302414 0) 0 nil])
([nil nil ((178 . 181) (177 . 178) (173 . 177) (#("\\" 0 1 (face org-level-1 fontified t)) . -173) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (#("d" 0 1 (face org-level-1 fontified t)) . -174) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) 175 (161 . 175) (149 . 161) (#("återanvändbar " 0 14 (face org-level-1 fontified t)) . -149) (undo-tree-id907 . -14) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -2) (undo-tree-id920 . -2) (undo-tree-id921 . -2) (undo-tree-id922 . -2) (undo-tree-id923 . -2) (undo-tree-id924 . -2) (undo-tree-id925 . -2) (undo-tree-id926 . -2) (undo-tree-id927 . -2) (undo-tree-id928 . -2) (undo-tree-id929 . -2) (undo-tree-id930 . -3) (undo-tree-id931 . -3) (undo-tree-id932 . -3) (undo-tree-id933 . -3) (undo-tree-id934 . -3) (undo-tree-id935 . -3) (undo-tree-id936 . -3) (undo-tree-id937 . -3) (undo-tree-id938 . -3) (undo-tree-id939 . -3) (undo-tree-id940 . -3) (undo-tree-id941 . -4) (undo-tree-id942 . -4) (undo-tree-id943 . -4) (undo-tree-id944 . -4) (undo-tree-id945 . -4) (undo-tree-id946 . -4) (undo-tree-id947 . -4) (undo-tree-id948 . -4) (undo-tree-id949 . -4) (undo-tree-id950 . -4) (undo-tree-id951 . -4) (undo-tree-id952 . -5) (undo-tree-id953 . -5) (undo-tree-id954 . -5) (undo-tree-id955 . -5) (undo-tree-id956 . -5) (undo-tree-id957 . -5) (undo-tree-id958 . -5) (undo-tree-id959 . -5) (undo-tree-id960 . -5) (undo-tree-id961 . -5) (undo-tree-id962 . -5) (undo-tree-id963 . -6) (undo-tree-id964 . -6) (undo-tree-id965 . -6) (undo-tree-id966 . -6) (undo-tree-id967 . -6) (undo-tree-id968 . -6) (undo-tree-id969 . -6) (undo-tree-id970 . -6) (undo-tree-id971 . -6) (undo-tree-id972 . -6) (undo-tree-id973 . -6) (undo-tree-id974 . -7) (undo-tree-id975 . -7) (undo-tree-id976 . -7) (undo-tree-id977 . -7) (undo-tree-id978 . -7) (undo-tree-id979 . -7) (undo-tree-id980 . -7) (undo-tree-id981 . -7) (undo-tree-id982 . -7) (undo-tree-id983 . -7) (undo-tree-id984 . -7) (undo-tree-id985 . -8) (undo-tree-id986 . -8) (undo-tree-id987 . -8) (undo-tree-id988 . -8) (undo-tree-id989 . -8) (undo-tree-id990 . -8) (undo-tree-id991 . -8) (undo-tree-id992 . -8) (undo-tree-id993 . -8) (undo-tree-id994 . -8) (undo-tree-id995 . -8) (undo-tree-id996 . -9) (undo-tree-id997 . -9) (undo-tree-id998 . -9) (undo-tree-id999 . -9) (undo-tree-id1000 . -9) (undo-tree-id1001 . -9) (undo-tree-id1002 . -9) (undo-tree-id1003 . -9) (undo-tree-id1004 . -9) (undo-tree-id1005 . -9) (undo-tree-id1006 . -9) (undo-tree-id1007 . -10) (undo-tree-id1008 . -10) (undo-tree-id1009 . -10) (undo-tree-id1010 . -10) (undo-tree-id1011 . -10) (undo-tree-id1012 . -10) (undo-tree-id1013 . -10) (undo-tree-id1014 . -10) (undo-tree-id1015 . -10) (undo-tree-id1016 . -10) (undo-tree-id1017 . -10) (undo-tree-id1018 . -11) (undo-tree-id1019 . -11) (undo-tree-id1020 . -11) (undo-tree-id1021 . -11) (undo-tree-id1022 . -11) (undo-tree-id1023 . -11) (undo-tree-id1024 . -11) (undo-tree-id1025 . -11) (undo-tree-id1026 . -11) (undo-tree-id1027 . -11) (undo-tree-id1028 . -11) (undo-tree-id1029 . -12) (undo-tree-id1030 . -12) (undo-tree-id1031 . -12) (undo-tree-id1032 . -12) (undo-tree-id1033 . -12) (undo-tree-id1034 . -12) (undo-tree-id1035 . -12) (undo-tree-id1036 . -12) (undo-tree-id1037 . -12) (undo-tree-id1038 . -12) (undo-tree-id1039 . -12) (undo-tree-id1040 . -14) (undo-tree-id1041 . -14) (undo-tree-id1042 . -14) (undo-tree-id1043 . -14) (undo-tree-id1044 . -14) (undo-tree-id1045 . -14) (undo-tree-id1046 . -14) (undo-tree-id1047 . -14) (undo-tree-id1048 . -14) (undo-tree-id1049 . -14) (undo-tree-id1050 . -14) (undo-tree-id1051 . -14) (undo-tree-id1052 . -14) (undo-tree-id1053 . -14) (undo-tree-id1054 . -14) (undo-tree-id1055 . -14) (undo-tree-id1056 . -14) 163 (149 . 163) (#("förbättring" 0 11 (face org-level-1 fontified t)) . -149) (undo-tree-id1057 . -11) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -2) (undo-tree-id1070 . -2) (undo-tree-id1071 . -2) (undo-tree-id1072 . -2) (undo-tree-id1073 . -2) (undo-tree-id1074 . -2) (undo-tree-id1075 . -2) (undo-tree-id1076 . -2) (undo-tree-id1077 . -2) (undo-tree-id1078 . -2) (undo-tree-id1079 . -2) (undo-tree-id1080 . -3) (undo-tree-id1081 . -3) (undo-tree-id1082 . -3) (undo-tree-id1083 . -3) (undo-tree-id1084 . -3) (undo-tree-id1085 . -3) (undo-tree-id1086 . -3) (undo-tree-id1087 . -3) (undo-tree-id1088 . -3) (undo-tree-id1089 . -3) (undo-tree-id1090 . -3) (undo-tree-id1091 . -4) (undo-tree-id1092 . -4) (undo-tree-id1093 . -4) (undo-tree-id1094 . -4) (undo-tree-id1095 . -4) (undo-tree-id1096 . -4) (undo-tree-id1097 . -4) (undo-tree-id1098 . -4) (undo-tree-id1099 . -4) (undo-tree-id1100 . -4) (undo-tree-id1101 . -4) (undo-tree-id1102 . -5) (undo-tree-id1103 . -5) (undo-tree-id1104 . -5) (undo-tree-id1105 . -5) (undo-tree-id1106 . -5) (undo-tree-id1107 . -5) (undo-tree-id1108 . -5) (undo-tree-id1109 . -5) (undo-tree-id1110 . -5) (undo-tree-id1111 . -5) (undo-tree-id1112 . -5) (undo-tree-id1113 . -6) (undo-tree-id1114 . -6) (undo-tree-id1115 . -6) (undo-tree-id1116 . -6) (undo-tree-id1117 . -6) (undo-tree-id1118 . -6) (undo-tree-id1119 . -6) (undo-tree-id1120 . -6) (undo-tree-id1121 . -6) (undo-tree-id1122 . -6) (undo-tree-id1123 . -6) (undo-tree-id1124 . -7) (undo-tree-id1125 . -7) (undo-tree-id1126 . -7) (undo-tree-id1127 . -7) (undo-tree-id1128 . -7) (undo-tree-id1129 . -7) (undo-tree-id1130 . -7) (undo-tree-id1131 . -7) (undo-tree-id1132 . -7) (undo-tree-id1133 . -7) (undo-tree-id1134 . -7) (undo-tree-id1135 . -8) (undo-tree-id1136 . -8) (undo-tree-id1137 . -8) (undo-tree-id1138 . -8) (undo-tree-id1139 . -8) (undo-tree-id1140 . -8) (undo-tree-id1141 . -8) (undo-tree-id1142 . -8) (undo-tree-id1143 . -8) (undo-tree-id1144 . -8) (undo-tree-id1145 . -8) (undo-tree-id1146 . -9) (undo-tree-id1147 . -9) (undo-tree-id1148 . -9) (undo-tree-id1149 . -9) (undo-tree-id1150 . -9) (undo-tree-id1151 . -9) (undo-tree-id1152 . -9) (undo-tree-id1153 . -9) (undo-tree-id1154 . -9) (undo-tree-id1155 . -9) (undo-tree-id1156 . -9) (undo-tree-id1157 . -10) (undo-tree-id1158 . -10) (undo-tree-id1159 . -10) (undo-tree-id1160 . -10) (undo-tree-id1161 . -10) (undo-tree-id1162 . -10) (undo-tree-id1163 . -10) (undo-tree-id1164 . -10) (undo-tree-id1165 . -10) (undo-tree-id1166 . -10) (undo-tree-id1167 . -10) (undo-tree-id1168 . -11) (undo-tree-id1169 . -11) (undo-tree-id1170 . -11) (undo-tree-id1171 . -11) (undo-tree-id1172 . -11) (undo-tree-id1173 . -11) (undo-tree-id1174 . -11) (undo-tree-id1175 . -11) (undo-tree-id1176 . -11) (undo-tree-id1177 . -11) (undo-tree-id1178 . -11) (undo-tree-id1179 . -11) 160 (149 . 160) (#("* " 0 1 (face org-level-1 fontified t) 1 2 (face org-level-1 fontified t)) . 146) (148 . 151) (146 . 148) (145 . 146) 130) nil (26025 48383 302275 0) 0 nil])
([nil nil ((#("** jumpapåse för träningskläder
" 0 1 (face org-level-1 fontified t) 1 2 (face org-level-1 fontified t) 2 32 (face org-level-1 fontified t)) . 146) (undo-tree-id168 . -31) (undo-tree-id169 . -2) (undo-tree-id170 . -3) (undo-tree-id171 . -3) (undo-tree-id172 . -3) (undo-tree-id173 . -3) (undo-tree-id174 . -3) (undo-tree-id175 . -3) (undo-tree-id176 . -3) (undo-tree-id177 . -3) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) (undo-tree-id183 . -3) (undo-tree-id184 . -3) (undo-tree-id185 . -3) (undo-tree-id186 . -3) (undo-tree-id187 . -3) (undo-tree-id188 . -3) (undo-tree-id189 . -3) (undo-tree-id190 . -3) (undo-tree-id191 . -3) (undo-tree-id192 . -3) (undo-tree-id193 . -3) (undo-tree-id194 . -3) (undo-tree-id195 . -3) (undo-tree-id196 . -3) (undo-tree-id197 . -3) (undo-tree-id198 . -3) (undo-tree-id199 . -3) (undo-tree-id200 . -3) (undo-tree-id201 . -3) (undo-tree-id202 . -3) (undo-tree-id203 . -3) (undo-tree-id204 . -3) (undo-tree-id205 . -3) (undo-tree-id206 . -3) (undo-tree-id207 . -3) (undo-tree-id208 . -3) (undo-tree-id209 . -3) (undo-tree-id210 . -3) (undo-tree-id211 . -3) (undo-tree-id212 . -3) (undo-tree-id213 . -3) (undo-tree-id214 . -3) (undo-tree-id215 . -3) (undo-tree-id216 . -3) (undo-tree-id217 . -3) (undo-tree-id218 . -3) (undo-tree-id219 . -3) (undo-tree-id220 . -3) (undo-tree-id221 . -3) (undo-tree-id222 . -3) (undo-tree-id223 . -3) (undo-tree-id224 . -3) (undo-tree-id225 . -3) (undo-tree-id226 . -3) (undo-tree-id227 . -3) (undo-tree-id228 . -3) (undo-tree-id229 . -3) (undo-tree-id230 . -3) (undo-tree-id231 . -3) (undo-tree-id232 . -3) (undo-tree-id233 . -3) (undo-tree-id234 . -3) (undo-tree-id235 . -3) (undo-tree-id236 . -3) (undo-tree-id237 . -3) (undo-tree-id238 . -3) (undo-tree-id239 . -3) (undo-tree-id240 . -3) (undo-tree-id241 . -3) (undo-tree-id242 . -3) (undo-tree-id243 . -3) (undo-tree-id244 . -3) (undo-tree-id245 . -3) (undo-tree-id246 . -3) (undo-tree-id247 . -3) (undo-tree-id248 . -3) (undo-tree-id249 . -3) (undo-tree-id250 . -3) (undo-tree-id251 . -3) (undo-tree-id252 . -3) (undo-tree-id253 . -3) (undo-tree-id254 . -3) (undo-tree-id255 . -3) (undo-tree-id256 . -3) (undo-tree-id257 . -3) (undo-tree-id258 . -3) (undo-tree-id259 . -3) (undo-tree-id260 . -3) (undo-tree-id261 . -3) (undo-tree-id262 . -3) (undo-tree-id263 . -3) (undo-tree-id264 . -3) (undo-tree-id265 . -3) (undo-tree-id266 . -3) (undo-tree-id267 . -3) (undo-tree-id268 . -3) (undo-tree-id269 . -3) (undo-tree-id270 . -3) (undo-tree-id271 . -3) (undo-tree-id272 . -3) (undo-tree-id273 . -3) (undo-tree-id274 . -3) (undo-tree-id275 . -3) (undo-tree-id276 . -3) (undo-tree-id277 . -3) (undo-tree-id278 . -3) (undo-tree-id279 . -3) (undo-tree-id280 . -3) (undo-tree-id281 . -3) (undo-tree-id282 . -3) (undo-tree-id283 . -3) (undo-tree-id284 . -3) (undo-tree-id285 . -3) (undo-tree-id286 . -3) (undo-tree-id287 . -3) (undo-tree-id288 . -3) (undo-tree-id289 . -3) (undo-tree-id290 . -3) (undo-tree-id291 . -3) (undo-tree-id292 . -3) (undo-tree-id293 . -3) (undo-tree-id294 . -3) (undo-tree-id295 . -3) (undo-tree-id296 . -3) (undo-tree-id297 . -3) (undo-tree-id298 . -3) (undo-tree-id299 . -3) (undo-tree-id300 . -3) (undo-tree-id301 . -3) (undo-tree-id302 . -3) (undo-tree-id303 . -3) (undo-tree-id304 . -3) (undo-tree-id305 . -3) (undo-tree-id306 . -3) (undo-tree-id307 . -3) (undo-tree-id308 . -3) (undo-tree-id309 . -3) (undo-tree-id310 . -3) (undo-tree-id311 . -3) (undo-tree-id312 . -3) (undo-tree-id313 . -3) (undo-tree-id314 . -3) (undo-tree-id315 . -3) (undo-tree-id316 . -3) (undo-tree-id317 . -3) (undo-tree-id318 . -3) (undo-tree-id319 . -3) (undo-tree-id320 . -3) (undo-tree-id321 . -3) (undo-tree-id322 . -3) (undo-tree-id323 . -3) (undo-tree-id324 . -3) (undo-tree-id325 . -3) (undo-tree-id326 . -3) (undo-tree-id327 . -3) (undo-tree-id328 . -3) (undo-tree-id329 . -3) (undo-tree-id330 . -3) (undo-tree-id331 . -3) (undo-tree-id332 . -3) (undo-tree-id333 . -3) (undo-tree-id334 . -3) (undo-tree-id335 . -3) (undo-tree-id336 . -3) (undo-tree-id337 . -3) (undo-tree-id338 . -3) (undo-tree-id339 . -3) (undo-tree-id340 . -3) (undo-tree-id341 . -3) (undo-tree-id342 . -3) (undo-tree-id343 . -3) (undo-tree-id344 . -3) (undo-tree-id345 . -3) (undo-tree-id346 . -3) (undo-tree-id347 . -3) (undo-tree-id348 . -3) (undo-tree-id349 . -3) (undo-tree-id350 . -3) (undo-tree-id351 . -3) (undo-tree-id352 . -3) (undo-tree-id353 . -3) (undo-tree-id354 . -3) (undo-tree-id355 . -3) (undo-tree-id356 . -3) (undo-tree-id357 . -3) (undo-tree-id358 . -3) (undo-tree-id359 . -3) (undo-tree-id360 . -3) (undo-tree-id361 . -3) (undo-tree-id362 . -3) (undo-tree-id363 . -3) (undo-tree-id364 . -3) (undo-tree-id365 . -3) (undo-tree-id366 . -3) (undo-tree-id367 . -3) (undo-tree-id368 . -3) (undo-tree-id369 . -3) (undo-tree-id370 . -3) (undo-tree-id371 . -3) (undo-tree-id372 . -3) (undo-tree-id373 . -3) (undo-tree-id374 . -3) (undo-tree-id375 . -3) (undo-tree-id376 . -3) (undo-tree-id377 . -3) (undo-tree-id378 . -3) (undo-tree-id379 . -3) (undo-tree-id380 . -3) (undo-tree-id381 . -3) (undo-tree-id382 . -3) (undo-tree-id383 . -3) (undo-tree-id384 . -3) (undo-tree-id385 . -3) (undo-tree-id386 . -3) (undo-tree-id387 . -3) (undo-tree-id388 . -3) (undo-tree-id389 . -3) (undo-tree-id390 . -3) (undo-tree-id391 . -3) (undo-tree-id392 . -3) (undo-tree-id393 . -3) (undo-tree-id394 . -3) (undo-tree-id395 . -3) (undo-tree-id396 . -3) (undo-tree-id397 . -3) (undo-tree-id398 . -3) (undo-tree-id399 . -3) (undo-tree-id400 . -3) (undo-tree-id401 . -3) (undo-tree-id402 . -3) (undo-tree-id403 . -3) (undo-tree-id404 . -3) (undo-tree-id405 . -3) (undo-tree-id406 . -3) (undo-tree-id407 . -3) (undo-tree-id408 . -3) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -3) (undo-tree-id412 . -3) (undo-tree-id413 . -3) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . -3) (undo-tree-id417 . -3) (undo-tree-id418 . -3) (undo-tree-id419 . -3) (undo-tree-id420 . -3) (undo-tree-id421 . -3) (undo-tree-id422 . -3) (undo-tree-id423 . -3) (undo-tree-id424 . -3) (undo-tree-id425 . -3) (undo-tree-id426 . -3) (undo-tree-id427 . -3) (undo-tree-id428 . -3) (undo-tree-id429 . -3) (undo-tree-id430 . -3) (undo-tree-id431 . -3) (undo-tree-id432 . -3) (undo-tree-id433 . -3) (undo-tree-id434 . -3) (undo-tree-id435 . -3) (undo-tree-id436 . -3) (undo-tree-id437 . -3) (undo-tree-id438 . -3) (undo-tree-id439 . -3) (undo-tree-id440 . -3) (undo-tree-id441 . -3) (undo-tree-id442 . -3) (undo-tree-id443 . -3) (undo-tree-id444 . -3) (undo-tree-id445 . -3) (undo-tree-id446 . -3) (undo-tree-id447 . -3) (undo-tree-id448 . -3) (undo-tree-id449 . -3) (undo-tree-id450 . -3) (undo-tree-id451 . -3) (undo-tree-id452 . -3) (undo-tree-id453 . -3) (undo-tree-id454 . -3) (undo-tree-id455 . -3) (undo-tree-id456 . -3) (undo-tree-id457 . -3) (undo-tree-id458 . -3) (undo-tree-id459 . -3) (undo-tree-id460 . -3) (undo-tree-id461 . -3) (undo-tree-id462 . -3) (undo-tree-id463 . -3) (undo-tree-id464 . -3) (undo-tree-id465 . -3) (undo-tree-id466 . -3) (undo-tree-id467 . -3) (undo-tree-id468 . -3) (undo-tree-id469 . -3) (undo-tree-id470 . -3) (undo-tree-id471 . -3) (undo-tree-id472 . -3) (undo-tree-id473 . -3) (undo-tree-id474 . -3) (undo-tree-id475 . -3) (undo-tree-id476 . -3) (undo-tree-id477 . -3) (undo-tree-id478 . -3) (undo-tree-id479 . -3) (undo-tree-id480 . -3) (undo-tree-id481 . -3) (undo-tree-id482 . -3) (undo-tree-id483 . -3) (undo-tree-id484 . -3) (undo-tree-id485 . -3) (undo-tree-id486 . -3) (undo-tree-id487 . -3) (undo-tree-id488 . -3) (undo-tree-id489 . -3) (undo-tree-id490 . -3) (undo-tree-id491 . -3) (undo-tree-id492 . -3) (undo-tree-id493 . -3) (undo-tree-id494 . -3) (undo-tree-id495 . -3) (undo-tree-id496 . -3) (undo-tree-id497 . -3) (undo-tree-id498 . -4) (undo-tree-id499 . -4) (undo-tree-id500 . -4) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -4) (undo-tree-id504 . -4) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (undo-tree-id509 . -5) (undo-tree-id510 . -5) (undo-tree-id511 . -5) (undo-tree-id512 . -5) (undo-tree-id513 . -5) (undo-tree-id514 . -5) (undo-tree-id515 . -5) (undo-tree-id516 . -5) (undo-tree-id517 . -5) (undo-tree-id518 . -5) (undo-tree-id519 . -5) (undo-tree-id520 . -6) (undo-tree-id521 . -6) (undo-tree-id522 . -6) (undo-tree-id523 . -6) (undo-tree-id524 . -6) (undo-tree-id525 . -6) (undo-tree-id526 . -6) (undo-tree-id527 . -6) (undo-tree-id528 . -6) (undo-tree-id529 . -6) (undo-tree-id530 . -6) (undo-tree-id531 . -7) (undo-tree-id532 . -7) (undo-tree-id533 . -7) (undo-tree-id534 . -7) (undo-tree-id535 . -7) (undo-tree-id536 . -7) (undo-tree-id537 . -7) (undo-tree-id538 . -7) (undo-tree-id539 . -7) (undo-tree-id540 . -7) (undo-tree-id541 . -7) (undo-tree-id542 . -8) (undo-tree-id543 . -8) (undo-tree-id544 . -8) (undo-tree-id545 . -8) (undo-tree-id546 . -8) (undo-tree-id547 . -8) (undo-tree-id548 . -8) (undo-tree-id549 . -8) (undo-tree-id550 . -8) (undo-tree-id551 . -8) (undo-tree-id552 . -8) (undo-tree-id553 . -9) (undo-tree-id554 . -9) (undo-tree-id555 . -9) (undo-tree-id556 . -9) (undo-tree-id557 . -9) (undo-tree-id558 . -9) (undo-tree-id559 . -9) (undo-tree-id560 . -9) (undo-tree-id561 . -9) (undo-tree-id562 . -9) (undo-tree-id563 . -9) (undo-tree-id564 . -10) (undo-tree-id565 . -10) (undo-tree-id566 . -10) (undo-tree-id567 . -10) (undo-tree-id568 . -10) (undo-tree-id569 . -10) (undo-tree-id570 . -10) (undo-tree-id571 . -10) (undo-tree-id572 . -10) (undo-tree-id573 . -10) (undo-tree-id574 . -10) (undo-tree-id575 . -11) (undo-tree-id576 . -11) (undo-tree-id577 . -11) (undo-tree-id578 . -11) (undo-tree-id579 . -11) (undo-tree-id580 . -11) (undo-tree-id581 . -11) (undo-tree-id582 . -11) (undo-tree-id583 . -11) (undo-tree-id584 . -11) (undo-tree-id585 . -11) (undo-tree-id586 . -12) (undo-tree-id587 . -12) (undo-tree-id588 . -12) (undo-tree-id589 . -12) (undo-tree-id590 . -12) (undo-tree-id591 . -12) (undo-tree-id592 . -12) (undo-tree-id593 . -12) (undo-tree-id594 . -12) (undo-tree-id595 . -12) (undo-tree-id596 . -12) (undo-tree-id597 . -13) (undo-tree-id598 . -13) (undo-tree-id599 . -13) (undo-tree-id600 . -13) (undo-tree-id601 . -13) (undo-tree-id602 . -13) (undo-tree-id603 . -13) (undo-tree-id604 . -13) (undo-tree-id605 . -13) (undo-tree-id606 . -13) (undo-tree-id607 . -13) (undo-tree-id608 . -13) (undo-tree-id609 . -13) (undo-tree-id610 . -13) (undo-tree-id611 . -13) (undo-tree-id612 . -13) (undo-tree-id613 . -14) (undo-tree-id614 . -14) (undo-tree-id615 . -14) (undo-tree-id616 . -14) (undo-tree-id617 . -14) (undo-tree-id618 . -14) (undo-tree-id619 . -14) (undo-tree-id620 . -14) (undo-tree-id621 . -14) (undo-tree-id622 . -14) (undo-tree-id623 . -14) (undo-tree-id624 . -15) (undo-tree-id625 . -15) (undo-tree-id626 . -15) (undo-tree-id627 . -15) (undo-tree-id628 . -15) (undo-tree-id629 . -15) (undo-tree-id630 . -15) (undo-tree-id631 . -15) (undo-tree-id632 . -15) (undo-tree-id633 . -15) (undo-tree-id634 . -15) (undo-tree-id635 . -15) (undo-tree-id636 . -15) (undo-tree-id637 . -15) (undo-tree-id638 . -15) (undo-tree-id639 . -15) (undo-tree-id640 . -17) (undo-tree-id641 . -17) (undo-tree-id642 . -17) (undo-tree-id643 . -17) (undo-tree-id644 . -17) (undo-tree-id645 . -17) (undo-tree-id646 . -17) (undo-tree-id647 . -17) (undo-tree-id648 . -17) (undo-tree-id649 . -17) (undo-tree-id650 . -17) (undo-tree-id651 . -18) (undo-tree-id652 . -18) (undo-tree-id653 . -18) (undo-tree-id654 . -18) (undo-tree-id655 . -18) (undo-tree-id656 . -18) (undo-tree-id657 . -18) (undo-tree-id658 . -18) (undo-tree-id659 . -18) (undo-tree-id660 . -18) (undo-tree-id661 . -18) (undo-tree-id662 . -20) (undo-tree-id663 . -20) (undo-tree-id664 . -20) (undo-tree-id665 . -20) (undo-tree-id666 . -20) (undo-tree-id667 . -20) (undo-tree-id668 . -20) (undo-tree-id669 . -20) (undo-tree-id670 . -20) (undo-tree-id671 . -20) (undo-tree-id672 . -20) (undo-tree-id673 . -21) (undo-tree-id674 . -21) (undo-tree-id675 . -21) (undo-tree-id676 . -21) (undo-tree-id677 . -21) (undo-tree-id678 . -21) (undo-tree-id679 . -21) (undo-tree-id680 . -21) (undo-tree-id681 . -21) (undo-tree-id682 . -21) (undo-tree-id683 . -21) (undo-tree-id684 . -22) (undo-tree-id685 . -22) (undo-tree-id686 . -22) (undo-tree-id687 . -22) (undo-tree-id688 . -22) (undo-tree-id689 . -22) (undo-tree-id690 . -22) (undo-tree-id691 . -22) (undo-tree-id692 . -22) (undo-tree-id693 . -22) (undo-tree-id694 . -22) (undo-tree-id695 . -23) (undo-tree-id696 . -23) (undo-tree-id697 . -23) (undo-tree-id698 . -23) (undo-tree-id699 . -23) (undo-tree-id700 . -23) (undo-tree-id701 . -24) (undo-tree-id702 . -24) (undo-tree-id703 . -24) (undo-tree-id704 . -24) (undo-tree-id705 . -24) (undo-tree-id706 . -24) (undo-tree-id707 . -24) (undo-tree-id708 . -24) (undo-tree-id709 . -24) (undo-tree-id710 . -24) (undo-tree-id711 . -24) (undo-tree-id712 . -25) (undo-tree-id713 . -25) (undo-tree-id714 . -25) (undo-tree-id715 . -25) (undo-tree-id716 . -25) (undo-tree-id717 . -25) (undo-tree-id718 . -25) (undo-tree-id719 . -25) (undo-tree-id720 . -25) (undo-tree-id721 . -25) (undo-tree-id722 . -25) (undo-tree-id723 . -26) (undo-tree-id724 . -26) (undo-tree-id725 . -26) (undo-tree-id726 . -26) (undo-tree-id727 . -26) (undo-tree-id728 . -26) (undo-tree-id729 . -26) (undo-tree-id730 . -26) (undo-tree-id731 . -26) (undo-tree-id732 . -26) (undo-tree-id733 . -26) (undo-tree-id734 . -27) (undo-tree-id735 . -27) (undo-tree-id736 . -27) (undo-tree-id737 . -27) (undo-tree-id738 . -27) (undo-tree-id739 . -27) (undo-tree-id740 . -27) (undo-tree-id741 . -27) (undo-tree-id742 . -27) (undo-tree-id743 . -27) (undo-tree-id744 . -27) (undo-tree-id745 . -27) (undo-tree-id746 . -27) (undo-tree-id747 . -27) (undo-tree-id748 . -27) (undo-tree-id749 . -27) (undo-tree-id750 . -27) (undo-tree-id751 . -27) (undo-tree-id752 . -27) (undo-tree-id753 . -27) (undo-tree-id754 . -27) (undo-tree-id755 . -27) (undo-tree-id756 . -27) (undo-tree-id757 . -27) (undo-tree-id758 . -27) (undo-tree-id759 . -27) (undo-tree-id760 . -27) (undo-tree-id761 . -27) (undo-tree-id762 . -27) (undo-tree-id763 . -27) (undo-tree-id764 . -27) (undo-tree-id765 . -27) (undo-tree-id766 . -27) (undo-tree-id767 . -27) (undo-tree-id768 . -27) (undo-tree-id769 . -27) (undo-tree-id770 . -27) (undo-tree-id771 . -27) (undo-tree-id772 . -27) (undo-tree-id773 . -27) (undo-tree-id774 . -27) (undo-tree-id775 . -27) (undo-tree-id776 . -27) (undo-tree-id777 . -27) (undo-tree-id778 . -27) (undo-tree-id779 . -27) (undo-tree-id780 . -27) (undo-tree-id781 . -27) (undo-tree-id782 . -27) (undo-tree-id783 . -27) (undo-tree-id784 . -28) (undo-tree-id785 . -28) (undo-tree-id786 . -28) (undo-tree-id787 . -28) (undo-tree-id788 . -28) (undo-tree-id789 . -28) (undo-tree-id790 . -28) (undo-tree-id791 . -28) (undo-tree-id792 . -28) (undo-tree-id793 . -28) (undo-tree-id794 . -28) (undo-tree-id795 . -29) (undo-tree-id796 . -29) (undo-tree-id797 . -29) (undo-tree-id798 . -29) (undo-tree-id799 . -29) (undo-tree-id800 . -29) (undo-tree-id801 . -29) (undo-tree-id802 . -29) (undo-tree-id803 . -29) (undo-tree-id804 . -29) (undo-tree-id805 . -29) (undo-tree-id806 . -30) (undo-tree-id807 . -30) (undo-tree-id808 . -30) (undo-tree-id809 . -30) (undo-tree-id810 . -30) (undo-tree-id811 . -30) (undo-tree-id812 . -30) (undo-tree-id813 . -30) (undo-tree-id814 . -30) (undo-tree-id815 . -30) (undo-tree-id816 . -30) (undo-tree-id817 . -31) (undo-tree-id818 . -31) (undo-tree-id819 . -31) (undo-tree-id820 . -31) (undo-tree-id821 . -31) (undo-tree-id822 . -31) (undo-tree-id823 . -31) (undo-tree-id824 . -31) (undo-tree-id825 . -31) (undo-tree-id826 . -31) (undo-tree-id827 . -31) (undo-tree-id828 . 1) (undo-tree-id829 . -32) (undo-tree-id830 . -32) (undo-tree-id831 . -32) (undo-tree-id832 . -32) (undo-tree-id833 . -32) (undo-tree-id834 . -32) (undo-tree-id835 . -32) (undo-tree-id836 . -32) (undo-tree-id837 . -32) (undo-tree-id838 . -32) (undo-tree-id839 . -32) (undo-tree-id840 . -32) (undo-tree-id841 . -32) (undo-tree-id842 . -32) (undo-tree-id843 . -32) (undo-tree-id844 . -32) (undo-tree-id845 . -2) (undo-tree-id846 . -2) (undo-tree-id847 . -2) (undo-tree-id848 . -2) (undo-tree-id849 . -2) (undo-tree-id850 . -2) (undo-tree-id851 . -2) (undo-tree-id852 . -2) (undo-tree-id853 . -2) (undo-tree-id854 . -2) (undo-tree-id855 . -2) (undo-tree-id856 . -2) (undo-tree-id857 . -2) (undo-tree-id858 . -2) (undo-tree-id859 . -2) (undo-tree-id860 . -2) (undo-tree-id861 . -2) (undo-tree-id862 . -2) (undo-tree-id863 . -2) (undo-tree-id864 . -2) (undo-tree-id865 . -2) (undo-tree-id866 . -2) (undo-tree-id867 . -2) (undo-tree-id868 . -32) 148) nil (26025 48383 302084 0) 0 nil])
([nil nil ((202 . 211) (181 . 202) (177 . 181) (174 . 177) (153 . 174) (149 . 153)) nil (26025 48383 301676 0) 0 nil])
([nil nil ((2046 . 2047) (t 26025 48383 309664 609000) 2045) nil (26026 25201 30885 0) 0 nil])
([nil nil ((1484 . 1489) (#("Dator- & mobilbackup" 0 20 (face org-level-3 fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1484) (undo-tree-id0 . -19) (t 26026 25201 37422 472000)) nil (26026 25334 660873 0) 0 nil])
([nil nil ((1489 . 1490)) nil (26026 25334 660852 0) 0 nil])
([nil nil ((2530 . 2532) (t 26026 25334 666149 972000)) nil (26026 25886 83033 0) 0 nil])
([nil nil ((#("  
" 0 2 (org-fold--spec-org-fold-outline-1035431620870602038 org-fold-outline fontified nil isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 2 3 (fontified nil)) . -2530) (2532 . 2533)) nil (26026 25886 83029 0) 0 nil])
([nil nil ((1517 . 1521) (1491 . 1518) (#("SCHEDULED: <2024-01-21 Sun +1m>" 0 10 (face org-special-keyword org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 10 11 (org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 11 30 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 30 31 (face org-date rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1491) (undo-tree-id0 . 20) (undo-tree-id1 . -11) (undo-tree-id2 . -11) (undo-tree-id3 . -11) (undo-tree-id4 . -11) (undo-tree-id5 . -11) (undo-tree-id6 . -11) (undo-tree-id7 . -11) (t 26026 25886 86815 840000)) nil (26030 26641 478543 0) 0 nil])
([nil nil ((215 . 220) (212 . 215) (211 . 212) (t 26030 26641 487172 689000) 178) nil (26032 10668 27253 0) 0 nil])
([nil nil ((239 . 243) (#("e" 0 1 (face org-level-2 fontified t)) . -239) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 240 (237 . 240) (236 . 237) (215 . 236) (#("samla " 0 6 (face org-level-2 fontified t)) . -215) (undo-tree-id20 . -6) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -2) (undo-tree-id35 . -2) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (undo-tree-id43 . -3) (undo-tree-id44 . -3) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) (undo-tree-id48 . -3) (undo-tree-id49 . -3) (undo-tree-id50 . -3) (undo-tree-id51 . -3) (undo-tree-id52 . -3) (undo-tree-id53 . -3) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -4) (undo-tree-id64 . -4) (undo-tree-id65 . -5) (undo-tree-id66 . -5) (undo-tree-id67 . -5) (undo-tree-id68 . -5) (undo-tree-id69 . -5) (undo-tree-id70 . -5) (undo-tree-id71 . -5) (undo-tree-id72 . -5) (undo-tree-id73 . -5) (undo-tree-id74 . -5) (undo-tree-id75 . -5) (undo-tree-id76 . -5) (undo-tree-id77 . -5) (undo-tree-id78 . -5) (undo-tree-id79 . -5) (undo-tree-id80 . -5) (undo-tree-id81 . -5) (undo-tree-id82 . -5) (undo-tree-id83 . -5) (undo-tree-id84 . -5) (undo-tree-id85 . -5) (undo-tree-id86 . -5) (undo-tree-id87 . -5) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -4) (undo-tree-id96 . -4) (undo-tree-id97 . -4) (undo-tree-id98 . -4) (undo-tree-id99 . -4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) (undo-tree-id102 . -4) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) (undo-tree-id114 . -4) (undo-tree-id115 . -5) (undo-tree-id116 . -5) (undo-tree-id117 . -5) (undo-tree-id118 . -5) (undo-tree-id119 . -5) (undo-tree-id120 . -5) (undo-tree-id121 . -5) (undo-tree-id122 . -5) (undo-tree-id123 . -5) (undo-tree-id124 . -5) (undo-tree-id125 . -5) (undo-tree-id126 . -5) (undo-tree-id127 . -6) (undo-tree-id128 . -6) (undo-tree-id129 . -6) (undo-tree-id130 . -6) (undo-tree-id131 . -6) (undo-tree-id132 . -6) (undo-tree-id133 . -6) (undo-tree-id134 . -6) (undo-tree-id135 . -6) (undo-tree-id136 . -6) (undo-tree-id137 . -6) (undo-tree-id138 . -6) (undo-tree-id139 . -6) (undo-tree-id140 . -6) (undo-tree-id141 . -6) (undo-tree-id142 . -6) (undo-tree-id143 . -6) (undo-tree-id144 . -6) (undo-tree-id145 . -6) (undo-tree-id146 . -6) (undo-tree-id147 . -6) (undo-tree-id148 . -6) (undo-tree-id149 . -6) (undo-tree-id150 . -6) 221 (220 . 221)) nil (26032 10668 27245 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 123 . 124) (#("
" 0 1 (fontified nil isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary)) . -187) (124 . 188) (nil org-fold--spec-org-fold-outline-1035431620870602038 org-fold-outline 123 . 124) (nil isearch-open-invisible org-fold-core--isearch-show 123 . 124) (nil isearch-open-invisible-temporary org-fold-core--isearch-show-temporary 123 . 124) (nil face org-date 123 . 124) (nil fontified t 123 . 124) (123 . 124) 83 (t 26032 10668 36146 6000)) nil (26032 10732 495409 0) 0 nil])
([nil nil ((#("** " 0 1 (face org-level-2 fontified t isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary) 1 3 (face org-level-2 fontified t isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary)) . 124) (127 . 129) 124) nil (26032 10732 495407 0) 0 nil])
([nil nil ((237 . 251) (nil org-todo-head nil 236 . 237) (nil org-todo-head nil 232 . 236) (nil org-todo-head nil 230 . 232) (nil org-todo-head nil 229 . 230) (231 . 237) (#(" " 0 1 (face org-level-2 fontified t)) . 231) (232 . 232) (228 . 232) (213 . 228) (nil org-todo-head nil 212 . 213) (nil org-todo-head nil 208 . 212) (nil org-todo-head nil 206 . 208) (nil org-todo-head nil 205 . 206) (207 . 213) (#(" " 0 1 (face org-level-2 fontified t)) . 207) (208 . 208) (#("* " 0 1 (face org-level-1 fontified t) 1 2 (face org-level-1 fontified t)) . 205) (207 . 210) (204 . 207) (188 . 194) (#(" " 0 1 (face org-level-1 org-todo-head "TODO" fontified t)) . 188) (189 . 189) 199 (189 . 199) (#("TODO " 0 4 (face (org-todo org-level-1) org-todo-head "TODO" fontified t) 4 5 (face org-level-1 org-todo-head "TODO" fontified t)) . -189) (undo-tree-id151 . -5) 194 (#("boka" 0 4 (face org-level-1 org-todo-head "TODO" fontified t)) . -194) (undo-tree-id152 . -4) 198 (194 . 198) (#("best" 0 4 (face org-level-1 org-todo-head "TODO" fontified t)) . -194) (undo-tree-id153 . -4) 198 (194 . 198) (nil org-todo-head nil 193 . 194) (nil org-todo-head nil 189 . 193) (nil org-todo-head nil 187 . 189) (188 . 194) (#(" " 0 1 (face org-level-1 fontified t)) . 188) (189 . 189) (187 . 189) (nil isearch-open-invisible-temporary org-fold-core--isearch-show-temporary 186 . 187) (nil isearch-open-invisible org-fold-core--isearch-show 186 . 187) (nil org-fold--spec-org-fold-outline--275027262611743720 org-fold-outline 186 . 187) (nil face org-date 186 . 187) (nil org-fold--spec-org-fold-outline-1035431620870602038 org-fold-outline 186 . 187) (nil fontified t 186 . 187) (186 . 187) 124) nil (26032 10732 495403 0) 0 nil])
([nil nil ((204 . 231)) nil (26032 10732 495386 0) 0 nil])
([nil nil ((340 . 354) (nil org-todo-head nil 339 . 340) (nil org-todo-head nil 335 . 339) (nil org-todo-head nil 333 . 335) (334 . 340) (#(" " 0 1 (face org-level-1 fontified t)) . 334) (335 . 335) (#("u" 0 1 (face org-level-1 fontified t)) . -335) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) 336 (335 . 336) (#("** " 0 1 (face org-level-2 fontified t) 1 2 (face org-level-2 fontified t) 2 3 (face org-level-2 fontified t)) . 333) (336 . 338) (#("*** " 0 1 (face org-level-3 fontified t) 1 2 (face org-level-3 fontified t) 2 3 (face org-level-3 fontified t) 3 4 (face org-level-3 fontified t)) . 333) (337 . 340) (#("** " 0 1 (face org-level-2 fontified t) 1 2 (face org-level-2 fontified t) 2 3 (face org-level-2 fontified t)) . 333) (336 . 340) (332 . 336) (318 . 332) (314 . 318) (313 . 314) (306 . 313) (#("* " 0 1 (face org-level-1 fontified t) 1 2 (face org-level-1 fontified t)) . 303) (305 . 308) (302 . 305) (286 . 302) (nil org-todo-head nil 285 . 286) (nil org-todo-head nil 281 . 285) (nil org-todo-head nil 279 . 281) (280 . 286) (#(" " 0 1 (face org-level-1 fontified t)) . 280) (281 . 281) (#("** " 0 1 (face org-level-2 fontified t) 1 2 (face org-level-2 fontified t) 2 3 (face org-level-2 fontified t)) . 279) (282 . 284) (279 . 282) (278 . 279) (t 26032 10732 502799 732000) 203) nil (26032 10763 379636 0) 0 nil])
([nil nil ((#(" " 0 1 (face org-level-1 org-todo-head "TODO" fontified t)) . -353) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1)) nil (26032 10763 379617 0) 0 nil])
([nil nil ((302 . 329) (t 26032 10763 386806 329000)) nil (26032 10790 831620 0) 0 nil])
([nil nil ((303 . 329) (#("DEADLINE: <2024-06-01 Sat>" 0 9 (isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show face org-special-keyword org-todo-head "TODO" fontified t) 9 10 (isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show org-todo-head "TODO" fontified t) 10 25 (isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-todo-head "TODO" fontified t) 25 26 (isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show face org-date rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-todo-head "TODO" fontified t)) . -303) (undo-tree-id197 . -19) (undo-tree-id198 . -19) (undo-tree-id199 . -19) (undo-tree-id200 . -19) (undo-tree-id201 . -19) (undo-tree-id202 . -19) (undo-tree-id203 . -19) (undo-tree-id204 . -19)) nil (26032 10790 831616 0) 0 nil])
([nil nil ((194 . 202) (t 26032 10790 838321 283000)) nil (26032 15350 16727 0) 0 nil])
([nil nil ((nil org-todo-head nil 2331 . 2345) (2334 . 2340) (#(" TODO " 0 6 (org-category "privat" fontified nil isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 2334) (t 26032 15350 25182 209000) (2340 . 2340) (t 26032 15350 25182 209000)) nil (26033 27156 429880 0) 0 nil])
([nil nil ((2455 . 2516) (2455 . 2456) (2357 . 2381) (#("<2024-01-25 Thu .+2d/3d>" 0 24 (org-category "privat" fontified nil isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 2357) (2357 . 2381) (#("<2024-01-20 Sat .+2d/3d>" 0 23 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 23 24 (face org-date rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 2357) (2381 . 2381) (apply 0 2412 2448 undo--wrap-and-run-primitive-undo 2412 2448 ((2412 . 2448) (#(":LAST_REPEAT: [2024-01-25 Thu 10:14]" 0 36 (org-category "privat" fontified nil org-fold--spec-org-fold-drawer-1035431620870602038 org-fold-drawer isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -2412))) (2412 . 2448) (#(":LAST_REPEAT: [2024-01-18 Thu 20:38]" 0 36 (org-category "privat" fontified nil org-fold--spec-org-fold-drawer-1035431620870602038 org-fold-drawer isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -2412) (2334 . 2340) (#(" DONE " 0 1 (face org-level-3 org-todo-head "TODO" org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 1 5 (face (org-done org-level-3) org-todo-head "TODO" org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 5 6 (face org-level-3 org-todo-head "TODO" org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 2334) (2334 . 2340) (#(" NEXT " 0 1 (face org-level-3 org-todo-head "TODO" org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 1 5 (face (org-todo org-level-3) org-todo-head "TODO" org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 5 6 (face org-level-3 org-todo-head "TODO" org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 2334) (t 26033 27156 437334 310000) (2340 . 2340) 2342 (t 26033 27156 437334 310000)) nil (26034 9852 342658 0) 0 nil])
([nil nil ((2483 . 2486) (#("o" 0 1 (org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -2483) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) 2484 (2482 . 2484) (#("NEXT" 0 4 (org-todo-head "TODO" org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 2482) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -3)) nil (26034 9852 342655 0) 0 nil])
([nil nil ((2504 . 2505) (#("5" 0 1 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 2504) (undo-tree-id36 . -1)) nil (26034 9852 342645 0) 0 nil])
([nil nil ((2506 . 2509) (#("Thu" 0 3 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 2506) (undo-tree-id33 . -2) (undo-tree-id34 . -3) (undo-tree-id35 . -3)) nil (26034 9852 342643 0) 0 nil])
([nil nil ((2510 . 2511) (#("1" 0 1 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 2510) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1)) nil (26034 9852 342637 0) 0 nil])
([nil nil ((2367 . 2368) (#("7" 0 1 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 2367) (undo-tree-id56 . -1) (t 26034 9852 349750 745000)) nil (26034 9869 340422 0) 0 nil])
([nil nil ((2369 . 2372) (#("Sat" 0 3 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 2369) (undo-tree-id53 . -2) (undo-tree-id54 . -3) (undo-tree-id55 . -3)) nil (26034 9869 340418 0) 0 nil])
([nil nil ((2281 . 2283) (#("19" 0 2 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 2281) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (t 26034 9869 347498 962000)) nil (26034 15046 478241 0) 0 nil])
([nil nil ((2282 . 2283) (#("5" 0 1 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 2282) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1)) nil (26034 15046 478229 0) 0 nil])
([nil nil ((2284 . 2287) (#("Fri" 0 3 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 2284) (undo-tree-id57 . -2) (undo-tree-id58 . -3) (undo-tree-id59 . -3)) nil (26034 15046 478218 0) 0 nil])
([nil nil ((2282 . 2283) (#("4" 0 1 (org-category "privat" face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t)) . 2282) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (t 26034 15046 485311 788000)) nil (26034 15063 249236 0) 0 nil])
([nil nil ((2889 . 2892) (t 26034 15063 255749 636000) 2338) nil (26034 33898 579365 0) 0 nil])
([nil nil ((nil org-todo-head nil 2901 . 2902) (nil org-todo-head nil 2897 . 2901) (nil org-todo-head nil 2895 . 2897) (nil org-todo-head nil 2893 . 2895) (2896 . 2902) (#(" " 0 1 (face org-level-3 fontified t)) . 2896) (2897 . 2897) (2893 . 2897) (2892 . 2893) 2332) nil (26034 33898 579364 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2902 . 2903) (#("
" 0 1 (fontified nil isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary org-category "privat")) . -3011) (2902 . 3012) 2897) nil (26034 33898 579363 0) 0 nil])
([nil nil ((2902 . 2906)) nil (26034 33898 579362 0) 0 nil])
([nil nil ((#("  
" 0 2 (isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show fontified t) 2 3 (fontified t)) . 2890) (undo-tree-id69 . -1) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (undo-tree-id75 . -2) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (undo-tree-id78 . -2) (undo-tree-id79 . -2) (undo-tree-id80 . -2) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) (undo-tree-id88 . -2) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -2) (undo-tree-id94 . -2) (undo-tree-id95 . -2) (undo-tree-id96 . -2) (undo-tree-id97 . -2) (undo-tree-id98 . -2) (undo-tree-id99 . -2) (undo-tree-id100 . -2) (undo-tree-id101 . -2) (undo-tree-id102 . -2) (undo-tree-id103 . -2) (undo-tree-id104 . -2) (undo-tree-id105 . -2) (undo-tree-id106 . -2) (undo-tree-id107 . -2) (undo-tree-id108 . -2) (undo-tree-id109 . -2) (undo-tree-id110 . -2) (undo-tree-id111 . -2) (undo-tree-id112 . -2) (undo-tree-id113 . -2) (undo-tree-id114 . -2) (undo-tree-id115 . -2) (undo-tree-id116 . -2) (undo-tree-id117 . -2) (undo-tree-id118 . -2) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (undo-tree-id121 . -2) (undo-tree-id122 . -2) (undo-tree-id123 . -2) (undo-tree-id124 . -2) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -3) (undo-tree-id150 . -2) (undo-tree-id151 . -3) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (undo-tree-id154 . -3) (undo-tree-id155 . -3) (undo-tree-id156 . -3) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -3) (undo-tree-id163 . -3) (undo-tree-id164 . -3) (undo-tree-id165 . -3) (undo-tree-id166 . -3) (undo-tree-id167 . -3) (undo-tree-id168 . -2) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) (undo-tree-id183 . -3) (undo-tree-id184 . -3) (undo-tree-id185 . -3) (undo-tree-id186 . -3) (undo-tree-id187 . -3) (undo-tree-id188 . -3) (undo-tree-id189 . -3) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -3) 2891) nil (26034 33898 579360 0) 0 nil])
([nil nil ((2925 . 2926) (#("6" 0 1 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary org-category "privat")) . 2925) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1)) nil (26034 33898 579304 0) 0 nil])
([nil nil ((2927 . 2930) (#("Fri" 0 3 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary org-category "privat")) . 2927) (undo-tree-id49 . -2) (undo-tree-id50 . -3) (undo-tree-id51 . -3)) nil (26034 33898 579296 0) 0 nil])
([nil nil ((2933 . 2934) (#("2" 0 1 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary org-category "privat")) . 2933) (undo-tree-id48 . -1)) nil (26034 33898 579294 0) 0 nil])
([nil nil ((#("/" 0 1 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary org-category "privat")) . 2935) (undo-tree-id46 . -1) (undo-tree-id47 . -1)) nil (26034 33898 579293 0) 0 nil])
([nil nil ((#("3" 0 1 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary org-category "privat")) . 2935) (undo-tree-id44 . -1) (undo-tree-id45 . -1)) nil (26034 33898 579293 0) 0 nil])
([nil nil ((#("d" 0 1 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary org-category "privat")) . 2935) (undo-tree-id42 . -1) (undo-tree-id43 . -1)) nil (26034 33898 579291 0) 0 nil])
([nil nil ((#(":LAST_REPEAT: [2024-01-25 Thu 10:14]
" 0 13 (face org-special-keyword fontified t isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary org-category "privat") 13 14 (fontified t isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary org-category "privat") 14 35 (keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-date fontified t isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary org-category "privat") 35 36 (keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-date fontified t isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary org-category "privat" rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 36 37 (fontified t isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary org-category "privat")) . 2967) (undo-tree-id0 . -36) (undo-tree-id1 . -29) (undo-tree-id2 . -29) (undo-tree-id3 . -29) (undo-tree-id4 . -29) (undo-tree-id5 . -29) (undo-tree-id6 . -29) (undo-tree-id7 . -29) (undo-tree-id8 . -29) (undo-tree-id9 . -29) (undo-tree-id10 . -29) (undo-tree-id11 . -29) (undo-tree-id12 . -29) (undo-tree-id13 . -29) (undo-tree-id14 . -29) (undo-tree-id15 . -29) (undo-tree-id16 . -29) (undo-tree-id17 . -29) (undo-tree-id18 . -29) (undo-tree-id19 . -29) (undo-tree-id20 . -29) (undo-tree-id21 . -29) (undo-tree-id22 . -29) (undo-tree-id23 . -29) (undo-tree-id24 . -29) (undo-tree-id25 . -29) (undo-tree-id26 . -29) (undo-tree-id27 . -29) (undo-tree-id28 . -29) (undo-tree-id29 . -29) (undo-tree-id30 . -29) (undo-tree-id31 . -29) (undo-tree-id32 . -29) (undo-tree-id33 . -29) (undo-tree-id34 . -29) (undo-tree-id35 . -29) (undo-tree-id36 . -29) (undo-tree-id37 . -29) (undo-tree-id38 . -29) (undo-tree-id39 . -29) (undo-tree-id40 . -29) (undo-tree-id41 . -37) 2996) nil (26034 33898 579289 0) 0 nil])
([nil nil ((2972 . 2973) 2894) nil (26034 33898 579253 0) 0 nil])
([nil nil ((2899 . 2909) (#("Anki" 0 4 (org-category "privat" face org-level-3 org-todo-head "TODO" fontified t)) . 2899) (undo-tree-id215 . -3) (undo-tree-id216 . -4) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (undo-tree-id219 . -4) (t 26034 33898 586439 768000)) nil (26034 33909 217361 0) 0 nil])
([nil nil ((2893 . 2899) (#(" TODO " 0 1 (face org-level-3 org-category "privat" org-todo-head "TODO" fontified t) 1 5 (face (org-todo org-level-3) org-category "privat" org-todo-head "TODO" fontified t) 5 6 (face org-level-3 org-category "privat" org-todo-head "TODO" fontified t)) . 2893) (t 26034 33909 222699 432000) (2899 . 2899) (t 26034 33909 222699 432000)) nil (26034 33949 498998 0) 0 nil])
([nil nil ((3016 . 3077) (2921 . 2942) (#("<2024-01-25 Thu .+1d>" 0 21 (fontified nil isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary org-category "privat")) . 2921) (2921 . 2942) (#("<2024-01-25 Thu .+1d>" 0 10 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary org-category "privat") 10 11 (isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show org-category "privat" face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t) 11 18 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary org-category "privat") 18 19 (isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show org-category "privat" face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t) 19 20 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary org-category "privat") 20 21 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary org-category "privat" rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link))) . 2921) (2942 . 2942) (apply 0 2973 3009 undo--wrap-and-run-primitive-undo 2973 3009 ((2973 . 3009) (#(":LAST_REPEAT: [2024-01-25 Thu 16:56]" 0 36 (fontified nil isearch-open-invisible org-fold-core--isearch-show isearch-open-invisible-temporary org-fold-core--isearch-show-temporary org-category "privat")) . -2973))) (2973 . 3009) (2973 . 2974) (2893 . 2899) (#(" DONE " 0 6 (face org-level-3 org-category "privat" org-todo-head "TODO" fontified nil)) . 2893) (2893 . 2899) (#(" NEXT " 0 1 (face org-level-3 org-category "privat" org-todo-head "TODO" fontified t) 1 5 (face (org-todo org-level-3) org-category "privat" org-todo-head "TODO" fontified t) 5 6 (face org-level-3 org-category "privat" org-todo-head "TODO" fontified t)) . 2893) (2899 . 2899)) nil (26034 33949 498996 0) 0 nil])
([nil nil ((nil fontified t 3077 . 3078) (nil org-category "privat" 3077 . 3078) (nil isearch-open-invisible org-fold-core--isearch-show 3077 . 3078) (nil isearch-open-invisible-temporary org-fold-core--isearch-show-temporary 3077 . 3078) (nil face org-date 3077 . 3078) (3077 . 3078) 2903) nil (26034 33949 498991 0) 0 nil])
([nil nil ((371 . 390) (368 . 371) (367 . 368) (t 26034 33949 506784 210000) 357) nil (26034 34012 483210 0) 0 nil])
([nil nil ((413 . 417) (408 . 413) (403 . 408) (401 . 403) (#("+" 0 1 (face org-level-3 fontified t)) . -401) (undo-tree-id225 . -1) 402 (397 . 402) (#("\\" 0 1 (face org-level-3 fontified t)) . -397) (undo-tree-id226 . -1) 398 (395 . 398) (#("** " 0 1 (face org-level-2 fontified t) 1 2 (face org-level-2 fontified t) 2 3 (face org-level-2 fontified t)) . 391) (394 . 398) (391 . 394) (390 . 391) (t 26034 34012 487875 247000) 388) nil (26034 34473 599530 0) 0 nil])
([nil nil ((417 . 422)) nil (26034 34473 599527 0) 0 nil])
([nil nil ((388 . 392) (371 . 388) (#("meditationsretreat?" 0 19 (face org-level-2 fontified t)) . 371) (undo-tree-id224 . -18)) nil (26034 34473 599527 0) 0 nil])
([nil nil ((430 . 432) (424 . 430) (#("1" 0 1 (face org-level-3 fontified t)) . -424) (undo-tree-id222 . -1) (#("3" 0 1 (face org-level-3 fontified t)) . -425) (undo-tree-id223 . -1) 426 (424 . 426)) nil (26034 34473 599526 0) 0 nil])
([nil nil ((443 . 445) (#("2" 0 1 (face org-level-3 fontified t)) . -443) (undo-tree-id220 . -1) 444 (443 . 444) (#("%" 0 1 (face org-level-3 fontified t)) . -443) (undo-tree-id221 . -1) 444 (437 . 444) (432 . 437)) nil (26034 34473 599524 0) 0 nil])
([nil nil ((nil org-todo-head nil 457 . 465) (nil org-todo-head nil 450 . 457) (nil org-todo-head nil 448 . 450) (451 . 457) (#(" " 0 1 (org-category "privat" face org-level-3 fontified t)) . 451) (452 . 452) (nil org-todo-head nil 439 . 447) (nil org-todo-head nil 432 . 439) (nil org-todo-head nil 430 . 432) (433 . 439) (#(" " 0 1 (org-category "privat" face org-level-3 fontified t)) . 433) (434 . 434) (nil org-todo-head nil 420 . 429) (nil org-todo-head nil 413 . 420) (nil org-todo-head nil 411 . 413) (414 . 420) (#(" " 0 1 (org-category "privat" face org-level-3 fontified t)) . 414) (415 . 415) (nil org-todo-head nil 402 . 410) (nil org-todo-head nil 395 . 402) (nil org-todo-head nil 394 . 395) (nil org-todo-head nil 393 . 394) (396 . 402) (#(" " 0 1 (org-category "privat" face org-level-3 fontified t)) . 396) (397 . 397) 393) nil (26034 34473 599517 0) 0 nil])
([nil nil ((410 . 437) (410 . 411) 409) nil (26034 34473 599515 0) 0 nil])
([nil nil ((457 . 484)) nil (26034 34473 599514 0) 0 nil])
([nil nil ((nil org-todo-head "TODO" 484 . 485) (nil face org-date 484 . 485) (nil fontified t 484 . 485) (nil org-category "privat" 484 . 485) (484 . 485) 458) nil (26034 34473 599514 0) 0 nil])
([nil nil ((503 . 530)) nil (26034 34473 599513 0) 0 nil])
([nil nil ((nil org-todo-head "TODO" 530 . 531) (nil face org-date 530 . 531) (nil fontified t 530 . 531) (nil org-category "privat" 530 . 531) (530 . 531) 504) nil (26034 34473 599512 0) 0 nil])
([nil nil ((549 . 576)) nil (26034 34473 599511 0) 0 nil])
([nil nil ((nil org-todo-head "TODO" 576 . 577) (nil face org-date 576 . 577) (nil fontified t 576 . 577) (nil org-category "privat" 576 . 577) (576 . 577) 550) nil (26034 34473 599507 0) 0 nil])
([nil nil ((392 . 393) (t 26034 34473 606311 496000) 368) nil (26034 34524 514177 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 438 . 439) (nil fontified nil 393 . 439) (393 . 439)) nil (26034 34524 514176 0) 0 nil])
([nil nil ((nil face org-link 439 . 440) (nil font-lock-multiline t 439 . 440) (nil fontified t 439 . 440) (nil isearch-open-invisible org-fold-core--isearch-show 439 . 440) (nil isearch-open-invisible-temporary org-fold-core--isearch-show-temporary 439 . 440) (439 . 440) 416) nil (26034 34524 514171 0) 0 nil])
([nil nil ((nil org-todo-head nil 794 . 808) (797 . 803) (#(" TODO " 0 6 (org-category "privat" fontified nil isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 797) (t 26034 34524 519481 778000) (803 . 803) (t 26034 34524 519481 778000)) nil (26034 36605 653217 0) 0 nil])
([nil nil ((897 . 958) (897 . 898) (820 . 840) (#("<2024-01-25 Thu +1w>" 0 20 (org-category "privat" fontified nil isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 820) (840 . 840) (apply 0 854 890 undo--wrap-and-run-primitive-undo 854 890 ((854 . 890) (#(":LAST_REPEAT: [2024-01-25 Thu 17:40]" 0 36 (org-category "privat" fontified nil isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -854))) (854 . 890) (#(":LAST_REPEAT: [2024-01-18 Thu 20:01]" 0 36 (org-category "privat" fontified nil isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -854) (797 . 803) (#(" DONE " 0 6 (org-todo-head "TODO" org-category "privat" fontified nil isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 797) (797 . 803) (#(" NEXT " 0 6 (org-todo-head "TODO" org-category "privat" fontified nil isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 797) (803 . 803)) nil (26034 36605 653212 0) 0 nil])
([nil nil ((2602 . 2603) (#("5" 0 1 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 2602) (undo-tree-id3 . -1) (t 26034 36605 657934 308000)) nil (26035 42488 453457 0) 0 nil])
([nil current ((2604 . 2607) (#("Thu" 0 3 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight org-category "privat" fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 2604) (undo-tree-id0 . -2) (undo-tree-id1 . -3) (undo-tree-id2 . -3)) nil (26035 42488 453452 0) 0 nil])
nil
